harbor2 <- harbor[c(13,18,23,33,46,55,62,72,85),]
harbor2
title(main = paste0(data_viaje$Date[1], " - ", data_viaje$Date[length(data_viaje$Date)]))
map_vms
map_vms(x = data_viaje$Lon, y = data_viaje$Lat, velocity = data_viaje$Vel_Cal)
map_vms2 <- function(x = x, y = y, velocity = velocity, xlab = "LONGITUDE", #text.lab = NULL,
ylab = "LATITUDE",  text.lab = FALSE, legend_vel = FALSE){
require(shape)
require(geoR)
dx = abs(max(x) - min(x))
dy = abs(max(y) - min(y))
if(dx > dy){
idx = (dx - dy)/2
maxY = max(y) + idx
minY = min(y) - idx
}else{
maxY = max(y)
minY = min(y)
}
if(dy > dx){
idy = (dy - dx)/2
maxX = max(x) + idy
minX = min(x) - idy
}else{
maxX = max(x)
minX = min(x)
}
xlim = c(minX,maxX)
ylim = c(minY,maxY)
newPoint <- pointZarpe(x, y)
x0 <- newPoint$x2
y0 <- newPoint$y2
x1 <- rev(rev(x0)[-1])
y1 <- rev(rev(y0)[-1])
x2 <- x0[-1]
y2 <- y0[-1]
plot(x0, y0,  type = "l", xlim = xlim, ylim = ylim, ylab = ylab, xlab = xlab)
map(xlim = xlim, ylim = ylim, fill = TRUE, col = "khaki1", lty = 0, add = T)
map(xlim = xlim, ylim = ylim, fill = FALSE, interior = TRUE, col = "grey", add = TRUE)
Arrows(x1, y1, x2, y2, arr.type = "curved", code = 2,lty = 1,
arr.length = 0.2, arr.adj = 1, col = velCol(velocity))
if(isTRUE(text.lab)){
text(x, y, text.lab, pos = 4, cex = 0.6)
}
if(isTRUE(legend_vel)){
XB = (minX + maxX)/2
XdiffAB = minX-maxX
XA1 = B + XdiffAB/4*3
XA2 = B + XdiffAB/4*2
XA3 = B + XdiffAB/4
Y1 = minY*0.98
Y2 = minY*0.96
YB = (minY + maxY)/2
legend.krige(x.leg = c(XA1, XB), y.leg = c(Y1, Y2), scale.vals = c(NA,NA,NA,NA),values = 0:20,
vertical=F, col=c(2,2,7,7,5,5,5,3,3,3,3,3,3,3,3,3))
text(x = XA2*1.001, y = Y2*0.99, labels = "Vel (knot)", cex.lab = 0.6, font = 1)
text(x = c(XA1, XA2*1.0067,XA3*1.0138,XB*1.005), y = Y2*1.03,
labels = c("[0-2]","[2-5]","[5-8]","[8-15]"), cex.lab =  0.6, font = 1)
}
}
map_vms2(x = data_viaje$Lon, y = data_viaje$Lat, velocity = data_viaje$Vel_Cal)
plot(x0, y0,  type = "l", xlim = xlim, ylim = ylim, ylab = ylab, xlab = xlab)
map_vms2 <- function(x = x, y = y, velocity = velocity, xlab = "LONGITUDE", #text.lab = NULL,
ylab = "LATITUDE",  text.lab = FALSE, legend_vel = FALSE){
require(shape)
require(geoR)
dx = abs(max(x) - min(x))
dy = abs(max(y) - min(y))
if(dx > dy){
idx = (dx - dy)/2
maxY = max(y) + idx
minY = min(y) - idx
}else{
maxY = max(y)
minY = min(y)
}
if(dy > dx){
idy = (dy - dx)/2
maxX = max(x) + idy
minX = min(x) - idy
}else{
maxX = max(x)
minX = min(x)
}
xlim = c(minX,maxX)
ylim = c(minY,maxY)
newPoint <- pointZarpe(x, y)
x0 <- newPoint$x2
y0 <- newPoint$y2
x1 <- rev(rev(x0)[-1])
y1 <- rev(rev(y0)[-1])
x2 <- x0[-1]
y2 <- y0[-1]
plot(x0, y0,  type = "l", xlim = xlim, ylim = ylim, ylab = ylab, xlab = xlab)
map(xlim = xlim, ylim = ylim, fill = TRUE, col = "khaki1", lty = 0, add = T)
map(xlim = xlim, ylim = ylim, fill = FALSE, interior = TRUE, col = 1, add = TRUE)
box()
Arrows(x1, y1, x2, y2, arr.type = "curved", code = 2,lty = 1,
arr.length = 0.2, arr.adj = 1, col = velCol(velocity))
if(isTRUE(text.lab)){
text(x, y, text.lab, pos = 4, cex = 0.6)
}
if(isTRUE(legend_vel)){
XB = (minX + maxX)/2
XdiffAB = minX-maxX
XA1 = B + XdiffAB/4*3
XA2 = B + XdiffAB/4*2
XA3 = B + XdiffAB/4
Y1 = minY*0.98
Y2 = minY*0.96
YB = (minY + maxY)/2
legend.krige(x.leg = c(XA1, XB), y.leg = c(Y1, Y2), scale.vals = c(NA,NA,NA,NA),values = 0:20,
vertical=F, col=c(2,2,7,7,5,5,5,3,3,3,3,3,3,3,3,3))
text(x = XA2*1.001, y = Y2*0.99, labels = "Vel (knot)", cex.lab = 0.6, font = 1)
text(x = c(XA1, XA2*1.0067,XA3*1.0138,XB*1.005), y = Y2*1.03,
labels = c("[0-2]","[2-5]","[5-8]","[8-15]"), cex.lab =  0.6, font = 1)
}
}
map_vms2(x = data_viaje$Lon, y = data_viaje$Lat, velocity = data_viaje$Vel_Cal)
harbor
text(x = harbor[c(13,18,23,33,46,55,62,72,85),"lon"],
y = harbor[c(13,18,23,33,46,55,62,72,85),"lat"],
labels = as.character(harbor[c(13,18,23,33,46,55,62,72,85),"harbor2"]), col = 4)
getwd()
harbor
harbor2
head(harbor2)
harbor2 <- harbor2[,2:4]
head(harbor2)
names(harbor2) <- c("harbor", "lon", "lat")
harbor2
save(harbor2, file = "C:/pablo/D/github/vmsR/data/harbor2.RData")
exists(harbor2)
exists(harbor2)
exists(harbor2)
exists(harbor2)
exists(x = harbor2)
exists(1)
harbor2
harbor
harbor2
save(harbor2, file = "C:/pablo/D/github/vmsR/data/harbor2.RData")
file_harbor = NULL
exists("file_harbor")
!is.null("file_harbor")
!is.null(file_harbor)
(file_harbor
file_harbor
library(vmsR)
dim(datos_vms)
# -------------------------------------------------------------------------
## guardar los datos VMS
write_vms(data = datos_vms, directorio = getwd(), file = NULL) # guardar informacion
library(vmsR)
harbor2
# -------------------------------------------------------------------------
## Analisis de datos VMS [frecuencia 10 min]
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
## paquetes
require(vmsR)
require(dplyr) # procesamiento de VMS
require(snow) # id viajes
require(doSNOW) # id viajes
require(rgdal) # id viajes
require(sp) # id viajes
require(rgeos) # id viajes
require(animation) # move
require(shape) # move
require(sf) # reporte
require(spData) # reporte
require(spDataLarge) # reporte
require(tmap)    # reporte
require(leaflet)  # reporte
require(mapview)  # reporte
require(sp)     # reporte
require(lubridate)  # reporte
require(DT)  # reporte
require(maps)  # reporte
require(mapdata) # reporte
require(data.table)  # reporte
# -------------------------------------------------------------------------
## Directorio
dirVMS <- "C:/pablo/D/2021/ClasesVMS" # <--- modificar directorio
setwd(dirVMS)
# -------------------------------------------------------------------------
## Leer datos
data_raw2        <- read.csv(file = "data_vms_new2.csv")
names(data_raw2) <- c("Cod_Barco", "Name_vessel", "Date", "Lon", "Lat", "Vel_VMS", "Course")
data_raw2$Date   <- strptime(data_raw2$Date, format = "%Y-%m-%d %H:%M:%S") # formato fecha
# -------------------------------------------------------------------------
## Procesamiento de datos VMS
data_proc2      <- processing_vms(data = data_raw2, vessel = "Cod_Barco", harbor = harbor)
# -------------------------------------------------------------------------
## Identificacion de las trayectorias de los viajes
data_proc_list2 <- split(data_proc2, data_proc2$Cod_Barco)
dharbor <- 2   # maxima distancia en puerto
rmin <- 6*6    # numero de registro minimo en el viaje
vmax <- 16     # velocidad maxima
vmin <- 3      # velocidad minima
hmax <- 0.5    # 30 min paso de tiempo m?ximo
dur_viaje <- 6 # en horas
nodes     <- 6 # numero de nucleos a usar
cl = makeCluster(nodes, type = "SOCK")
start_time <- Sys.time()
registerDoSNOW(cl)
cluster = foreach(i = seq_along(data_proc_list2), .inorder = FALSE) %dopar%{
try(vmsR::identify_trip(data = data_proc_list2[[i]], dharbor = dharbor,
rmin = rmin, vmax = vmax, vmin = vmin, hmax = hmax,
dur_viaje = dur_viaje))
}
stopCluster(cl)
end_time   <- Sys.time()
end_time - start_time
data_tray <- cluster %>% lapply(as.data.frame) %>% bind_rows()
head(data_tray)
# -------------------------------------------------------------------------
## mapa de moviemiento
data       <- data_tray[data_tray$mistake == 0, ] # viajes correctamente identificados
Fecha      <- seq.Date(from = as.Date("2016-06-20", format = "%Y-%m-%d"), to = as.Date("2016-06-21", format = "%Y-%m-%d"), by = "day")
Fecha_trac <- as.Date(substring(data$Date,1,10), format = "%Y-%m-%d")
data       <- data[Fecha_trac %in% Fecha,]
viajes     <- tapply(data$Cod_Viaje_VMS, data$Cod_Viaje_VMS, length)
viajes     <- viajes[viajes > 6*6] #  por lo menos tenga 6 ubicaciones en el dia
data       <- data[data$Cod_Viaje_VMS %in% names(viajes),] ## al filtrar x dia algunas trayectorias quedan incompletas y pueden complicar la iterpolacion
## Interpolamos -- > definimos el area de proyeccion
area = "+init=epsg:24891"
proj4 = "+proj=utm +south +zone=18 +ellps=WGS84"
data_proj <- projet(data = data, proj4 = proj4, area = area)# genera Lon y Lat en UTM
data_inte <- intervms(data = data_proj, scale.temporal = 20) # ahora interpolamos a 10
source("move_fleet.R") # funcion para generar el move
hist(data_inte$LONGITUDE)
hist(data_inte$LATITUDE)
xlim <- c(-78,-77)
ylim <- c(-12.5,-10)
move_fleet(data_inte = data_inte, xlim = xlim, ylim = ylim,
nmax = 50,interval = 0.8, lwd = 1.5) # revisar las ayudas
# -------------------------------------------------------------------------
## Identificar los lances de pesca
data_tray <- data_tray[data_tray$mistake %in% c(0,1,2),] # seleccionamos los viajes correctamente identificados
datos_vms <- identify_set(data = data_tray , thres = 0.51, loops = 50, freq_vms = "high", namefile = NULL) # la red entrenada del paquete
plot(datos_vms$Lon, datos_vms$Lat, pch = ".")
points(datos_vms$Lon_calas, datos_vms$Lat_calas, pch = ".", col = 2)
# -------------------------------------------------------------------------
## guardar los datos VMS
write_vms(data = datos_vms, directorio = getwd(), file = NULL, file_harbor = harbor2) # guardar informacion # revisar write_vms y ver si tiene ayudas
# -------------------------------------------------------------------------
## Generar reporte
cat("\n-------COMPILAR Y GENERAR REPORTE-------\n")
input_report <- system.file("reporte", "reporte.Rmd", package = "vmsR")
output_report <- file.path(getwd(), paste0("reporte_",Sys.Date(),".html"))
rmarkdown::render(input = input_report, output_file = output_report)
# -------------------------------------------------------------------------
## Analisis de datos VMS [frecuencia 10 min]
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
## paquetes
require(vmsR)
require(dplyr) # procesamiento de VMS
require(snow) # id viajes
require(doSNOW) # id viajes
require(rgdal) # id viajes
require(sp) # id viajes
require(rgeos) # id viajes
require(animation) # move
require(shape) # move
require(sf) # reporte
require(spData) # reporte
require(spDataLarge) # reporte
require(tmap)    # reporte
require(leaflet)  # reporte
require(mapview)  # reporte
require(sp)     # reporte
require(lubridate)  # reporte
require(DT)  # reporte
require(maps)  # reporte
require(mapdata) # reporte
require(data.table)  # reporte
# -------------------------------------------------------------------------
## Directorio
dirVMS <- "C:/pablo/D/2021/ClasesVMS" # <--- modificar directorio
setwd(dirVMS)
# -------------------------------------------------------------------------
## Leer datos
data_raw2        <- read.csv(file = "data_vms_new2.csv")
names(data_raw2) <- c("Cod_Barco", "Name_vessel", "Date", "Lon", "Lat", "Vel_VMS", "Course")
data_raw2$Date   <- strptime(data_raw2$Date, format = "%Y-%m-%d %H:%M:%S") # formato fecha
head(data_proc2)
head(data_proc_list2)
head(data_tray)
library(vmsR)
harbor2
library(vmsR)
library(vmsR)
library(vmsR)
# -------------------------------------------------------------------------
## paquetes
require(vmsR)
require(dplyr) # procesamiento de VMS
require(snow) # id viajes
require(doSNOW) # id viajes
require(rgdal) # id viajes
require(sp) # id viajes
require(rgeos) # id viajes
require(animation) # move
require(shape) # move
require(sf) # reporte
require(spData) # reporte
require(spDataLarge) # reporte
require(tmap)    # reporte
require(leaflet)  # reporte
require(mapview)  # reporte
require(sp)     # reporte
require(lubridate)  # reporte
require(DT)  # reporte
require(maps)  # reporte
require(mapdata) # reporte
require(data.table)  # reporte
# -------------------------------------------------------------------------
## Directorio
dirVMS <- "C:/pablo/D/2021/ClasesVMS" # <--- modificar directorio
setwd(dirVMS)
# -------------------------------------------------------------------------
## Leer datos
data_raw2        <- read.csv(file = "data_vms_new2.csv")
names(data_raw2) <- c("Cod_Barco", "Name_vessel", "Date", "Lon", "Lat", "Vel_VMS", "Course")
data_raw2$Date   <- strptime(data_raw2$Date, format = "%Y-%m-%d %H:%M:%S") # formato fecha
# -------------------------------------------------------------------------
## Procesamiento de datos VMS
data_proc2      <- processing_vms(data = data_raw2, vessel = "Cod_Barco", harbor = harbor)
# -------------------------------------------------------------------------
## Identificacion de las trayectorias de los viajes
data_proc_list2 <- split(data_proc2, data_proc2$Cod_Barco)
dharbor <- 2   # maxima distancia en puerto
rmin <- 6*6    # numero de registro minimo en el viaje
vmax <- 16     # velocidad maxima
vmin <- 3      # velocidad minima
hmax <- 0.5    # 30 min paso de tiempo m?ximo
dur_viaje <- 6 # en horas
nodes     <- 6 # numero de nucleos a usar
cl = makeCluster(nodes, type = "SOCK")
start_time <- Sys.time()
registerDoSNOW(cl)
cluster = foreach(i = seq_along(data_proc_list2), .inorder = FALSE) %dopar%{
try(vmsR::identify_trip(data = data_proc_list2[[i]], dharbor = dharbor,
rmin = rmin, vmax = vmax, vmin = vmin, hmax = hmax,
dur_viaje = dur_viaje))
}
stopCluster(cl)
end_time   <- Sys.time()
end_time - start_time
data_tray <- cluster %>% lapply(as.data.frame) %>% bind_rows()
head(data_tray)
data       <- data_tray[data_tray$mistake == 0, ] # viajes correctamente identificados
Fecha      <- seq.Date(from = as.Date("2016-06-20", format = "%Y-%m-%d"), to = as.Date("2016-06-21", format = "%Y-%m-%d"), by = "day")
Fecha_trac <- as.Date(substring(data$Date,1,10), format = "%Y-%m-%d")
data       <- data[Fecha_trac %in% Fecha,]
viajes     <- tapply(data$Cod_Viaje_VMS, data$Cod_Viaje_VMS, length)
viajes     <- viajes[viajes > 6*6] #  por lo menos tenga 6 ubicaciones en el dia
data       <- data[data$Cod_Viaje_VMS %in% names(viajes),] ## al filtrar x dia algunas trayectorias quedan incompletas y pueden complicar la iterpolacion
area = "+init=epsg:24891"
proj4 = "+proj=utm +south +zone=18 +ellps=WGS84"
data_proj <- projet(data = data, proj4 = proj4, area = area)# genera Lon y Lat en UTM
data_inte <- intervms(data = data_proj, scale.temporal = 20) # ahora interpolamos a 10
hist(data_inte$LONGITUDE)
hist(data_inte$LATITUDE)
xlim <- c(-78,-77)
ylim <- c(-12.5,-10)
hist(data_inte$LONGITUDE)
hist(data_inte$LATITUDE)
xlim <- c(-78,-77)
ylim <- c(-12.5,-10)
move_fleet(data_inte = data_inte, xlim = xlim, ylim = ylim, file_harbor = harbor2,
nmax = 50,interval = 0.8, lwdArrows = 1.5) #
harbor2
move_fleet <- function(data_inte = data_inte, xlim=c(-86,-70), lwdArrows = 1,
ylim=c(-21, -3), interval = 0.9, movie.name = "movie.gif", nmax = 50, file_harbor = NULL){
Data.Barco <- list()
for(i in seq_along(unique(data_inte$Cod_Barco))){
sxs <- data_inte[data_inte$Cod_Barco == unique(data_inte$Cod_Barco)[i],]
sxs$Color <- i
newPoint  <- vmsR:::.pointZarpe(sxs$LONGITUDE, sxs$LATITUDE)
x0 <- newPoint$x2
y0 <- newPoint$y2
x1 <- rev(rev(x0)[-1])
y1 <- rev(rev(y0)[-1])
x2 <- x0[-1]
y2 <- y0[-1]
ArrowsBarco       <- data.frame(cbind(x1, y1, x2, y2))
ArrowsBarco$Fecha <- sxs$Date.INTERP
ArrowsBarco$Color <- sxs$Color
Data.Barco[[i]] <- ArrowsBarco
}
saveGIF({
for (i in seq_along(sort(unique(data_inte$Date.INTERP)))){
par(mar = c(4,4,4,0.5), oma = c(0,0,0,0))
plot(data_inte$LONGITUDE, data_inte$LATITUDE, main = sort(unique(data_inte$Date.INTERP))[i],
xlim = xlim, ylim = ylim, col = "white", xlab = "Longitud",
ylab = "Latitud", cex.axis = 1.5, cex.lab = 1.5, cex = 2)
map(xlim = xlim, ylim = ylim, fill = TRUE, col = "khaki1", lty = 0, add = T)
map(xlim = xlim, ylim = ylim, fill = FALSE, interior = TRUE, col = "grey", add = TRUE)
if(!is.null(file_harbor)){
text(x = file_harbor$lon,
y = file_harbor$lat,
labels = as.character(file_harbor$harbor), col = 4)
}
box(col = "grey")
for(ii in seq_along(Data.Barco)){
t     <- Data.Barco[[ii]]
obs   <- t[t$Fecha == sort(unique(data_inte$Date.INTERP))[i],]
Arrows(obs$x1, obs$y1, obs$x2, obs$y2, lty = 1, code = 2,lwd = lwdArrows,#arr.type = "curved",
arr.length = 0.1, arr.adj = 1, col = obs$Color)
}
}
}, movie.name = movie.name, interval = interval, nmax = nmax)
return(invisible())
}
move_fleet(data_inte = data_inte, xlim = xlim, ylim = ylim, file_harbor = harbor2,
nmax = 50,interval = 0.8, lwdArrows = 1.5) #
library(vmsR)
library(vmsR)
# -------------------------------------------------------------------------
## paquetes
require(vmsR)
library(vmsR)
# -------------------------------------------------------------------------
## Analisis de datos VMS [frecuencia 10 min]
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
## paquetes
require(vmsR)
require(dplyr) # procesamiento de VMS
require(snow) # id viajes
require(doSNOW) # id viajes
require(rgdal) # id viajes
require(sp) # id viajes
require(rgeos) # id viajes
require(animation) # move
require(shape) # move
require(sf) # reporte
require(spData) # reporte
require(spDataLarge) # reporte
require(tmap)    # reporte
require(leaflet)  # reporte
require(mapview)  # reporte
require(sp)     # reporte
require(lubridate)  # reporte
require(DT)  # reporte
require(maps)  # reporte
require(mapdata) # reporte
require(data.table)  # reporte
# -------------------------------------------------------------------------
## Directorio
dirVMS <- "C:/pablo/D/2021/ClasesVMS" # <--- modificar directorio
setwd(dirVMS)
# -------------------------------------------------------------------------
## Leer datos
data_raw2        <- read.csv(file = "data_vms_new2.csv")
names(data_raw2) <- c("Cod_Barco", "Name_vessel", "Date", "Lon", "Lat", "Vel_VMS", "Course")
data_raw2$Date   <- strptime(data_raw2$Date, format = "%Y-%m-%d %H:%M:%S") # formato fecha
# -
# -------------------------------------------------------------------------
## Procesamiento de datos VMS
data_proc2      <- processing_vms(data = data_raw2, vessel = "Cod_Barco", harbor = harbor)
data_proc_list2 <- split(data_proc2, data_proc2$Cod_Barco)
dharbor <- 2   # maxima distancia en puerto
rmin <- 6*6    # numero de registro minimo en el viaje
vmax <- 16     # velocidad maxima
vmin <- 3      # velocidad minima
hmax <- 0.5    # 30 min paso de tiempo m?ximo
dur_viaje <- 6 # en horas
nodes     <- 6 # numero de nucleos a usar
cl = makeCluster(nodes, type = "SOCK")
start_time <- Sys.time()
registerDoSNOW(cl)
cluster = foreach(i = seq_along(data_proc_list2), .inorder = FALSE) %dopar%{
try(vmsR::identify_trip(data = data_proc_list2[[i]], dharbor = dharbor,
rmin = rmin, vmax = vmax, vmin = vmin, hmax = hmax,
dur_viaje = dur_viaje))
}
stopCluster(cl)
end_time   <- Sys.time()
end_time - start_time
data_tray <- cluster %>% lapply(as.data.frame) %>% bind_rows()
head(data_tray)
data       <- data_tray[data_tray$mistake == 0, ] # viajes correctamente identificados
Fecha      <- seq.Date(from = as.Date("2016-06-20", format = "%Y-%m-%d"), to = as.Date("2016-06-21", format = "%Y-%m-%d"), by = "day")
Fecha_trac <- as.Date(substring(data$Date,1,10), format = "%Y-%m-%d")
data       <- data[Fecha_trac %in% Fecha,]
viajes     <- tapply(data$Cod_Viaje_VMS, data$Cod_Viaje_VMS, length)
viajes     <- viajes[viajes > 6*6] #  por lo menos tenga 6 ubicaciones en el dia
data       <- data[data$Cod_Viaje_VMS %in% names(viajes),] ## al filtrar x dia algunas trayectorias quedan incompletas y pueden complicar la iterpolacion
## Interpolamos -- > definimos el area de proyeccion
area = "+init=epsg:24891"
proj4 = "+proj=utm +south +zone=18 +ellps=WGS84"
data_proj <- projet(data = data, proj4 = proj4, area = area)# genera Lon y Lat en UTM
data_inte <- intervms(data = data_proj, scale.temporal = 20) # ahora interpolamos a 10
hist(data_inte$LONGITUDE)
hist(data_inte$LATITUDE)
xlim <- c(-78,-77) # cambiar acorde a sus datos
ylim <- c(-12.5,-10) # cambiar acorde a sus datos
move_fleet(data_inte = data_inte, xlim = xlim, ylim = ylim, file_harbor = harbor2,
nmax = 50,interval = 0.8, lwdArrows = 1.5) #
data_tray <- data_tray[data_tray$mistake %in% c(0,1,2),] # seleccionamos los viajes correctamente identificados
datos_vms <- identify_set(data = data_tray , thres = 0.51, loops = 50, freq_vms = "high", namefile = NULL) # la red entrenada del paquete
# -------------------------------------------------------------------------
## guardar los datos VMS
write_vms(data = datos_vms, directorio = getwd(), file = NULL, file_harbor = harbor2) # guardar informacion # revisar write_vms y ver si tiene ayudas
cat("\n-------COMPILAR Y GENERAR REPORTE-------\n")
input_report <- system.file("reporte", "reporte.Rmd", package = "vmsR")
output_report <- file.path(getwd(), paste0("reporte_",Sys.Date(),".html"))
rmarkdown::render(input = input_report, output_file = output_report)
