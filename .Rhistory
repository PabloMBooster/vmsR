}
#    }
}
}
data$id <- id
#UBICAR LOS VIAJES
data$mistake[is.infinite(data$time) & is.na((data$time))] <- 3
data$time[is.infinite(data$time) & is.na(data$time)] <- 3
data$mistake[data$time > hmax] <- 2
data$trip = NA
idist_harbor  <- which(data$id %in% 1)
Location        = data.frame(trip_start = idist_harbor)
if(dim(Location)[1] == 0){
Location = data.frame(trip_start =c(1,1))
}
Location$length = c(diff(Location$trip_start),1)
if(max(Location$length) > rmin){
Location        = Location[Location$length > rmin,] # 4
Location$trip_end   = Location$trip_start + Location$length
Location$same   = c(NA,Location$trip_end[-length(Location$trip_start)] - Location$trip_start[-1])
if(length(which(Location$same == 0))>0){
Location[which(Location$same == 0),"trip_start"] = Location[which(Location$same == 0),"trip_start"] + 1
}
Location$length = Location$trip_end - Location$trip_start
trip <- rep(1:length(Location$length),Location$length+1)
registerTrip <- NULL
for(u in 1:length(Location$length)){
emisiones      <- Location$trip_start[u]:Location$trip_end[u]
registerTrip <- c(registerTrip, emisiones)
}
data_trip       = data[registerTrip,]
data_trip$trip  = trip
# Clean trips <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
data_trip = data_trip[-Location$trip_start,]
omitTrip  = unique(data_trip[data_trip$velocity_2 > vmax # 15
& !is.na(data_trip$velocity_2), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitTrip    = unique(data_trip[data_trip$time > hmax # 2.3
& !is.na(data_trip$time), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitdist_harbor = tapply(data_trip$dist_harbor, data_trip$trip, max)
omitdist_harbor = as.numeric(names(omitdist_harbor[omitdist_harbor< dmin])) # 5
data_trip   = data_trip[!data_trip$trip %in% omitdist_harbor, ]
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# generar un reporte de numero de barcos / total de viajes / viajes malos
if(dim(data_trip)[1] == 0){
data_trip = data
}
if(dim(data_trip)[1] > 0){
if(isTRUE(see)){
print(length(unique(data_trip$trip)))
}#else{
}
}
else{
data_trip = data
}
return(data_trip)
}
output2 <- identify_trip(data = processing_vessel)
output2 <- identify_trip(data = processing_vessel)
head(processing_vessel)
identify_trip <- function(data = data, dharbor = 2, vharbor = 5, rmin = 4,
vmax = 20, hmax = 2.3, dmin = 5, see = FALSE){
Dist_harbor     <- data[["dist_harbor"]]  # distancia a puerto
velocity <- data[["Vel_Cal"]] # velocidad de emision
#demision   <- data[["distanciaEmision"]] # distancia entre emisiones
data$mistake <- 0
# 0 sin mistake
# 1 velocidad 0 cuando el barco esta en mar
# 2 el intervalo de horas es mayor a 2
# 3 la hora en inf y se le pone 0
velocity[1][is.na(velocity[1])] <- 0
#demision[1][is.na(demision[1])] <- 0
velocity[is.na(velocity)] <- 30 # para se eliminado despues
data$mistake[dist_harbor > dharbor & is.na(velocity)] <- 1 # 2
#UBICAR LOS PUNTOS EN TIERRA Y MAR
n  <- length(dist_harbor)
id <- rep(0, n)
for (i in 1:n){
if(dist_harbor[i] < dist_harbor){ # 2
if(velocity[i] < vharbor){ # 2
#       if(demision[i] < emiPUERTO){ # 1
id[i] <- 1
}else {
id[i] <- 0
}
#    }
}
}
data$id <- id
#UBICAR LOS VIAJES
data$mistake[is.infinite(data$time) & is.na((data$time))] <- 3
data$time[is.infinite(data$time) & is.na(data$time)] <- 3
data$mistake[data$time > hmax] <- 2
data$trip = NA
idist_harbor  <- which(data$id %in% 1)
Location        = data.frame(trip_start = idist_harbor)
if(dim(Location)[1] == 0){
Location = data.frame(trip_start =c(1,1))
}
Location$length = c(diff(Location$trip_start),1)
if(max(Location$length) > rmin){
Location        = Location[Location$length > rmin,] # 4
Location$trip_end   = Location$trip_start + Location$length
Location$same   = c(NA,Location$trip_end[-length(Location$trip_start)] - Location$trip_start[-1])
if(length(which(Location$same == 0))>0){
Location[which(Location$same == 0),"trip_start"] = Location[which(Location$same == 0),"trip_start"] + 1
}
Location$length = Location$trip_end - Location$trip_start
trip <- rep(1:length(Location$length),Location$length+1)
registerTrip <- NULL
for(u in 1:length(Location$length)){
emisiones      <- Location$trip_start[u]:Location$trip_end[u]
registerTrip <- c(registerTrip, emisiones)
}
data_trip       = data[registerTrip,]
data_trip$trip  = trip
# Clean trips <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
data_trip = data_trip[-Location$trip_start,]
omitTrip  = unique(data_trip[data_trip$velocity_2 > vmax # 15
& !is.na(data_trip$velocity_2), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitTrip    = unique(data_trip[data_trip$time > hmax # 2.3
& !is.na(data_trip$time), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitdist_harbor = tapply(data_trip$dist_harbor, data_trip$trip, max)
omitdist_harbor = as.numeric(names(omitdist_harbor[omitdist_harbor< dmin])) # 5
data_trip   = data_trip[!data_trip$trip %in% omitdist_harbor, ]
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# generar un reporte de numero de barcos / total de viajes / viajes malos
if(dim(data_trip)[1] == 0){
data_trip = data
}
if(dim(data_trip)[1] > 0){
if(isTRUE(see)){
print(length(unique(data_trip$trip)))
}#else{
}
}
else{
data_trip = data
}
return(data_trip)
}
output2 <- identify_trip(data = processing_vessel)
head(processing_vessel)
identify_trip <- function(data = data, dharbor = 2, vharbor = 5, rmin = 4,
vmax = 20, hmax = 2.3, dmin = 5, see = FALSE){
Dist_harbor     <- data[["dist_harbor"]]  # distancia a puerto
velocity <- data[["Vel_Cal"]] # velocidad de emision
#demision   <- data[["distanciaEmision"]] # distancia entre emisiones
data$mistake <- 0
# 0 sin mistake
# 1 velocidad 0 cuando el barco esta en mar
# 2 el intervalo de horas es mayor a 2
# 3 la hora en inf y se le pone 0
velocity[1][is.na(velocity[1])] <- 0
#demision[1][is.na(demision[1])] <- 0
velocity[is.na(velocity)] <- 30 # para se eliminado despues
data$mistake[dist_harbor > dharbor & is.na(velocity)] <- 1 # 2
#UBICAR LOS PUNTOS EN TIERRA Y MAR
n  <- length(Dist_harbor)
id <- rep(0, n)
for (i in 1:n){
if(Dist_harbor[i] < dharbor){ # 2
if(velocity[i] < vharbor){ # 2
#       if(demision[i] < emiPUERTO){ # 1
id[i] <- 1
}else {
id[i] <- 0
}
#    }
}
}
data$id <- id
#UBICAR LOS VIAJES
data$mistake[is.infinite(data$Time) & is.na((data$Time))] <- 3
data$Time[is.infinite(data$Time) & is.na(data$Time)] <- 3
data$mistake[data$Time > hmax] <- 2
data$trip = NA
idist_harbor  <- which(data$id %in% 1)
Location        = data.frame(trip_start = idist_harbor)
if(dim(Location)[1] == 0){
Location = data.frame(trip_start =c(1,1))
}
Location$length = c(diff(Location$trip_start),1)
if(max(Location$length) > rmin){
Location        = Location[Location$length > rmin,] # 4
Location$trip_end   = Location$trip_start + Location$length
Location$same   = c(NA,Location$trip_end[-length(Location$trip_start)] - Location$trip_start[-1])
if(length(which(Location$same == 0))>0){
Location[which(Location$same == 0),"trip_start"] = Location[which(Location$same == 0),"trip_start"] + 1
}
Location$length = Location$trip_end - Location$trip_start
trip <- rep(1:length(Location$length),Location$length+1)
registerTrip <- NULL
for(u in 1:length(Location$length)){
emisiones      <- Location$trip_start[u]:Location$trip_end[u]
registerTrip <- c(registerTrip, emisiones)
}
data_trip       = data[registerTrip,]
data_trip$trip  = trip
# Clean trips <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
data_trip = data_trip[-Location$trip_start,]
omitTrip  = unique(data_trip[data_trip$velocity_2 > vmax # 15
& !is.na(data_trip$velocity_2), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitTrip    = unique(data_trip[data_trip$time > hmax # 2.3
& !is.na(data_trip$time), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitdist_harbor = tapply(data_trip$dist_harbor, data_trip$trip, max)
omitdist_harbor = as.numeric(names(omitdist_harbor[omitdist_harbor< dmin])) # 5
data_trip   = data_trip[!data_trip$trip %in% omitdist_harbor, ]
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# generar un reporte de numero de barcos / total de viajes / viajes malos
if(dim(data_trip)[1] == 0){
data_trip = data
}
if(dim(data_trip)[1] > 0){
if(isTRUE(see)){
print(length(unique(data_trip$trip)))
}#else{
}
}
else{
data_trip = data
}
return(data_trip)
}
output2 <- identify_trip(data = processing_vessel)
identify_trip <- function(data = data, dharbor = 2, vharbor = 5, rmin = 4,
vmax = 20, hmax = 2.3, dmin = 5, see = FALSE){
Dist_harbor     <- data[["dist_harbor"]]  # distancia a puerto
velocity <- data[["Vel_Cal"]] # velocidad de emision
#demision   <- data[["distanciaEmision"]] # distancia entre emisiones
data$mistake <- 0
# 0 sin mistake
# 1 velocidad 0 cuando el barco esta en mar
# 2 el intervalo de horas es mayor a 2
# 3 la hora en inf y se le pone 0
velocity[1][is.na(velocity[1])] <- 0
#demision[1][is.na(demision[1])] <- 0
velocity[is.na(velocity)] <- 30 # para se eliminado despues
data$mistake[Dist_harbor > dharbor & is.na(velocity)] <- 1 # 2
#UBICAR LOS PUNTOS EN TIERRA Y MAR
n  <- length(Dist_harbor)
id <- rep(0, n)
for (i in 1:n){
if(Dist_harbor[i] < dharbor){ # 2
if(velocity[i] < vharbor){ # 2
#       if(demision[i] < emiPUERTO){ # 1
id[i] <- 1
}else {
id[i] <- 0
}
#    }
}
}
data$id <- id
#UBICAR LOS VIAJES
data$mistake[is.infinite(data$Time) & is.na((data$Time))] <- 3
data$Time[is.infinite(data$Time) & is.na(data$Time)] <- 3
data$mistake[data$Time > hmax] <- 2
data$trip = NA
idist_harbor  <- which(data$id %in% 1)
Location        = data.frame(trip_start = idist_harbor)
if(dim(Location)[1] == 0){
Location = data.frame(trip_start =c(1,1))
}
Location$length = c(diff(Location$trip_start),1)
if(max(Location$length) > rmin){
Location        = Location[Location$length > rmin,] # 4
Location$trip_end   = Location$trip_start + Location$length
Location$same   = c(NA,Location$trip_end[-length(Location$trip_start)] - Location$trip_start[-1])
if(length(which(Location$same == 0))>0){
Location[which(Location$same == 0),"trip_start"] = Location[which(Location$same == 0),"trip_start"] + 1
}
Location$length = Location$trip_end - Location$trip_start
trip <- rep(1:length(Location$length),Location$length+1)
registerTrip <- NULL
for(u in 1:length(Location$length)){
emisiones      <- Location$trip_start[u]:Location$trip_end[u]
registerTrip <- c(registerTrip, emisiones)
}
data_trip       = data[registerTrip,]
data_trip$trip  = trip
# Clean trips <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
data_trip = data_trip[-Location$trip_start,]
omitTrip  = unique(data_trip[data_trip$velocity_2 > vmax # 15
& !is.na(data_trip$velocity_2), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitTrip    = unique(data_trip[data_trip$time > hmax # 2.3
& !is.na(data_trip$time), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitdist_harbor = tapply(data_trip$dist_harbor, data_trip$trip, max)
omitdist_harbor = as.numeric(names(omitdist_harbor[omitdist_harbor< dmin])) # 5
data_trip   = data_trip[!data_trip$trip %in% omitdist_harbor, ]
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# generar un reporte de numero de barcos / total de viajes / viajes malos
if(dim(data_trip)[1] == 0){
data_trip = data
}
if(dim(data_trip)[1] > 0){
if(isTRUE(see)){
print(length(unique(data_trip$trip)))
}#else{
}
}
else{
data_trip = data
}
return(data_trip)
}
output2 <- identify_trip(data = processing_vessel)
head(processing_vessel)
identify_trip <- function(data = data, dharbor = 2, vharbor = 5, rmin = 4,
vmax = 20, hmax = 2.3, dmin = 5, see = FALSE){
Dist_harbor     <- data[["Dist_harbor"]]  # distancia a puerto
velocity <- data[["Vel_Cal"]] # velocidad de emision
#demision   <- data[["distanciaEmision"]] # distancia entre emisiones
data$mistake <- 0
# 0 sin mistake
# 1 velocidad 0 cuando el barco esta en mar
# 2 el intervalo de horas es mayor a 2
# 3 la hora en inf y se le pone 0
velocity[1][is.na(velocity[1])] <- 0
#demision[1][is.na(demision[1])] <- 0
velocity[is.na(velocity)] <- 30 # para se eliminado despues
data$mistake[Dist_harbor > dharbor & is.na(velocity)] <- 1 # 2
#UBICAR LOS PUNTOS EN TIERRA Y MAR
n  <- length(Dist_harbor)
id <- rep(0, n)
for (i in 1:n){
if(Dist_harbor[i] < dharbor){ # 2
if(velocity[i] < vharbor){ # 2
#       if(demision[i] < emiPUERTO){ # 1
id[i] <- 1
}else {
id[i] <- 0
}
#    }
}
}
data$id <- id
#UBICAR LOS VIAJES
data$mistake[is.infinite(data$Time) & is.na((data$Time))] <- 3
data$Time[is.infinite(data$Time) & is.na(data$Time)] <- 3
data$mistake[data$Time > hmax] <- 2
data$trip = NA
idist_harbor  <- which(data$id %in% 1)
Location        = data.frame(trip_start = idist_harbor)
if(dim(Location)[1] == 0){
Location = data.frame(trip_start =c(1,1))
}
Location$length = c(diff(Location$trip_start),1)
if(max(Location$length) > rmin){
Location        = Location[Location$length > rmin,] # 4
Location$trip_end   = Location$trip_start + Location$length
Location$same   = c(NA,Location$trip_end[-length(Location$trip_start)] - Location$trip_start[-1])
if(length(which(Location$same == 0))>0){
Location[which(Location$same == 0),"trip_start"] = Location[which(Location$same == 0),"trip_start"] + 1
}
Location$length = Location$trip_end - Location$trip_start
trip <- rep(1:length(Location$length),Location$length+1)
registerTrip <- NULL
for(u in 1:length(Location$length)){
emisiones      <- Location$trip_start[u]:Location$trip_end[u]
registerTrip <- c(registerTrip, emisiones)
}
data_trip       = data[registerTrip,]
data_trip$trip  = trip
# Clean trips <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
data_trip = data_trip[-Location$trip_start,]
omitTrip  = unique(data_trip[data_trip$velocity_2 > vmax # 15
& !is.na(data_trip$velocity_2), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitTrip    = unique(data_trip[data_trip$time > hmax # 2.3
& !is.na(data_trip$time), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitdist_harbor = tapply(data_trip$dist_harbor, data_trip$trip, max)
omitdist_harbor = as.numeric(names(omitdist_harbor[omitdist_harbor< dmin])) # 5
data_trip   = data_trip[!data_trip$trip %in% omitdist_harbor, ]
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# generar un reporte de numero de barcos / total de viajes / viajes malos
if(dim(data_trip)[1] == 0){
data_trip = data
}
if(dim(data_trip)[1] > 0){
if(isTRUE(see)){
print(length(unique(data_trip$trip)))
}#else{
}
}
else{
data_trip = data
}
return(data_trip)
}
output2 <- identify_trip(data = processing_vessel)
head(processing_vessel)
processing_vessel$Dist_Emisiones
range(processing_vessel$Dist_Emisiones)
range(processing_vessel$Dist_Emisiones, na.rm = T)
sort(processing_vessel$Dist_Emisiones)
dat <- read.dbf("D:/disco_rocio/sisesat_2015_2016_FINAL/2016/01_15enero2016pel.dbf")
dat <- read.dbf("D:/disco_rocio/sisesat_2015_2016_FINAL/2016/01_15enero2016pel.dbf")
require(foreign)
dat <- read.dbf("D:/disco_rocio/sisesat_2015_2016_FINAL/2016/01_15enero2016pel.dbf")
require(foreign)
dat <- read.dbf("D:/disco_rocio/sisesat_2015_2016_FINAL/2016/01_15enero2016pel.dbf")
dat <- read.dbf("D:/disco_rocio/sisesat_2015_2016_FINAL/2016/01_15enero2016pel.dbf")
identify_trip <- function(data = data, dharbor = 2, vharbor = 5, rmin = 4,
vmax = 20, hmax = 2.3, dmin = 5, see = FALSE){
dist_harbor     <- data[["dist_harbor"]]  # distancia a puerto
velocity <- data[["velocity_2"]] # velocidad de emision
#demision   <- data[["distanciaEmision"]] # distancia entre emisiones
data$mistake <- 0
# 0 sin mistake
# 1 velocidad 0 cuando el barco esta en mar
# 2 el intervalo de horas es mayor a 2
# 3 la hora en inf y se le pone 0
velocity[1][is.na(velocity[1])] <- 0
#demision[1][is.na(demision[1])] <- 0
velocity[is.na(velocity)] <- 30 # para se eliminado despues
data$mistake[dist_harbor > dharbor & is.na(velocity)] <- 1 # 2
#UBICAR LOS PUNTOS EN TIERRA Y MAR
n  <- length(dist_harbor)
id <- rep(0, n)
for (i in 1:n){
if(dist_harbor[i] < dist_harbor){ # 2
if(velocity[i] < vharbor){ # 2
#       if(demision[i] < emiPUERTO){ # 1
id[i] <- 1
}else {
id[i] <- 0
}
#    }
}
}
data$id <- id
#UBICAR LOS VIAJES
data$mistake[is.infinite(data$time) & is.na((data$time))] <- 3
data$time[is.infinite(data$time) & is.na(data$time)] <- 3
data$mistake[data$time > hmax] <- 2
data$trip = NA
idist_harbor  <- which(data$id %in% 1)
Location        = data.frame(trip_start = idist_harbor)
if(dim(Location)[1] == 0){
Location = data.frame(trip_start =c(1,1))
}
Location$length = c(diff(Location$trip_start),1)
if(max(Location$length) > rmin){
Location        = Location[Location$length > rmin,] # 4
Location$trip_end   = Location$trip_start + Location$length
Location$same   = c(NA,Location$trip_end[-length(Location$trip_start)] - Location$trip_start[-1])
if(length(which(Location$same == 0))>0){
Location[which(Location$same == 0),"trip_start"] = Location[which(Location$same == 0),"trip_start"] + 1
}
Location$length = Location$trip_end - Location$trip_start
trip <- rep(1:length(Location$length),Location$length+1)
registerTrip <- NULL
for(u in 1:length(Location$length)){
emisiones      <- Location$trip_start[u]:Location$trip_end[u]
registerTrip <- c(registerTrip, emisiones)
}
data_trip       = data[registerTrip,]
data_trip$trip  = trip
# Clean trips <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
data_trip = data_trip[-Location$trip_start,]
omitTrip  = unique(data_trip[data_trip$velocity_2 > vmax # 15
& !is.na(data_trip$velocity_2), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitTrip    = unique(data_trip[data_trip$time > hmax # 2.3
& !is.na(data_trip$time), "viaje"])
data_trip   = data_trip[!data_trip$trip %in% omitTrip, ]
omitdist_harbor = tapply(data_trip$dist_harbor, data_trip$trip, max)
omitdist_harbor = as.numeric(names(omitdist_harbor[omitdist_harbor< dmin])) # 5
data_trip   = data_trip[!data_trip$trip %in% omitdist_harbor, ]
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
# generar un reporte de numero de barcos / total de viajes / viajes malos
if(dim(data_trip)[1] == 0){
data_trip = data
}
if(dim(data_trip)[1] > 0){
if(isTRUE(see)){
print(length(unique(data_trip$trip)))
}#else{
}
}
else{
data_trip = data
}
return(data_trip)
}
trip_vessel2 <- identify_trip(data = processing_vessel, dharbor = 2, vharbor = 2, rmin = 6, hmax = 2.3)
names(dat) <- c("num_vessel", "date", "clase", "tipo_rec","lon", "lat", "num_zona", "velocity", "course", "name_vessel")
data <- dat[,c("num_vessel", "date","lon", "lat", "velocity", "course", "name_vessel")]
data$date <- modTime(data$date)
head(data)
dim(data)
head(data)
data0 <- data[data$num_vessel == 17997,]
map_vms(oo$Lon, oo$Lat, oo$Vel_VMS)
library(vmsR)
library(vmsR)
oo <- data_vms[data_vms$Cod_Viaje_VMS == unique(data_vms$Cod_Viaje_VMS)[1],]
head(oo)
dat <- read.dbf("E:/disco_rocio/sisesat_2015_2016_FINAL/2016/01_15enero2016pel.dbf")
#
require(foreign)
dat <- read.dbf("E:/disco_rocio/sisesat_2015_2016_FINAL/2016/01_15enero2016pel.dbf")
