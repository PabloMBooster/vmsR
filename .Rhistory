writeLines("")
print(paste("MSE of the tested partition: ", round(test_perf[5,ii],3),sep=""))
if (ii == 10){
dif <- test_perf[5,1:ii] - train_perf[5,1:ii]
num = sum(dif > 0.01)
if (num < 8){
ii <- ii + 1
}else{
MSE_max <- MSE_max + 1
ii <- 1
ptm <- proc.time()[3]
vraisloops <- 0
print(paste("Rising MSE.max to: ", MSE_max,sep=""))
}
}else{
ii <- ii + 1
}
}
}
train_perf[7,] <- train_perf[3,]/train_perf[1,] # proporcion de calas verdaderas respecto a las observadas
train_perf[8,] <- train_perf[4,]/train_perf[1,] # proporcion de calas falsas respecto a las observadas
train_perf[9,] <- train_perf[6,]/train_perf[1,] # proporcion de falsos negativos respecto a las calas observadas
train_perf[10,] <- (train_perf[2,] - train_perf[1,])/train_perf[1,] # ratio de la diferencia entre nÃºmero de calas identificadas y observadas, respecto al nÃºmero de calas observadas
test_perf[8,] <- test_perf[2,] - test_perf[1,] # diferencia entre nÃºmero de calas observadas e identificadas
test_perf[9,] <- test_perf[3,]/test_perf[1,] # proporcion de calas verdaderas respecto a las observadas
test_perf[10,] <- test_perf[4,]/test_perf[1,] # proporcion de calas falsas respecto a las observadas
test_perf[11,] <- test_perf[6,]/test_perf[1,] # proporcion de falsos negativos respecto a las calas observadas
test_perf[12,] <- (test_perf[2,] - test_perf[1,])/test_perf[1,] # ratio de la diferencia entre nÃºmero de calas identificadas y observadas, respecto al nÃºmero de calas observadas
test_perf[13,] <- test_perf[7,]/test_perf[1,] # proporcion de calas mal ubicadas respecto al nÃºmero de calas observadas
prom_train <- apply(train_perf,1,mean,na.rm=TRUE)
prom_test <- apply(test_perf,1,mean,na.rm=TRUE)
prom_comp <- apply(comparacion,1,mean,na.rm=TRUE)
prom_co_0 <- prom_co
prom_ci_0 <- prom_ci
prom_co <- prom_test[1]
prom_ci <- prom_test[2]
prom_dif_ratio <- prom_test[12]
th <- th + 1
}
if (th > 2 && prom_co - prom_ci > 10 && prom_ci_0 - prom_co_0 <  10){
thres <- threshold[th-2]
ii <- 1
vraisloops <- 1
ptm <- proc.time()[3] # Start the clock!
while (ii <= nb_loop){
vraisloops = vraisloops + 1
sets <- training_validation_sets(data_scaled,name_traj_ID,prop_train)
training_set <- sets$training_set
validation_set <- sets$validation_set
muestras <- list(training=training_set,validation=validation_set)
namefile = paste0(getwd(),"/muestra_loop_",ii)
save(muestras, file = paste0(namefile, ".RData"))
output$samples[[ii]] <- assign(paste0("samples_", ii), muestras)
nnet_train <- training_set
nnet_train <- cbind(nnet_train, training_set$Primera_Cala == 0)
names(nnet_train)[dim(training_set)[2]+1] <- 'Cala_0'
nnet_train <- cbind(nnet_train, training_set$Primera_Cala == 1)
names(nnet_train)[dim(training_set)[2]+2] <- 'Cala_1'
training_set$Cala_nnet <- class.ind(training_set$Primera_Cala)
nets <- vector("list", repetitions)
sse <- rep(NA,repetitions)
for (rep in 1:repetitions){
nets[[rep]] = nnet(Cala.nnet ~ Vel_Cal + Acel_1 + Acel_2 + hora_transf +
Cambio_Rumbo_Tiempo,data=training_set,size=neurons,softmax=TRUE,
trace = FALSE)
sse[rep] = sum(nets[[rep]]$residuals^2)
}
best_net = nets[[which.min(sse)]]
namefile = paste0(getwd(),"/ann_loop_",ii,"_neurons_",neurons)
save(best_net, file = paste0(input_dir, namefile, ".RData"))
#save(best_net, file = paste0(namefile, ".RData"))
output$ann[[ii]] <- assign(paste0("ann_loop", ii,"_neurons_",neurons), best_net)
calas_predichas <- as.numeric(best_net$fitted.values[,2] > thres)
print(calas.predichas)
CM <- table(data.frame(predicho=calas_predichas == 1, real = training_set$Primera_Cala == 1))
# print(CM)
if(sum(dim(CM)) == 4){
train_perf[1,ii] <- CM[1,2]+CM[2,2] # calas observadas
train_perf[2,ii] <- CM[2,1]+CM[2,2] # calas identificadas
train_perf[3,ii] <- CM[2,2] # calas verdaderas
train_perf[4,ii] <- CM[2,1] # calas falsas
train_perf[5,ii] <- sse[which.min(sse)]/(dim(training_set)[1]*2)
train_perf[6,ii] <- CM[1,2] # falsos negativos
comparacion[1,ii] <- train_perf[1,ii]/dim(training_set)[1]*100
comparacion[2,ii] <- train_perf[2,ii]/dim(training_set)[1]*100
comparacion[3,ii] <- comparacion[2,ii] - comparacion[1,ii]
train_perf[11,ii] <- (CM[1,1]+CM[2,2])/sum(CM)
}else{
train_perf[1,ii] <- CM[1,2]+0 # calas observadas
train_perf[2,ii] <- 0 # calas identificadas
train_perf[3,ii] <- 0 # calas verdaderas
train_perf[4,ii] <- 0 # calas falsas
train_perf[5,ii] <- sse[which.min(sse)]/(dim(training_set)[1]*2)
train_perf[6,ii] <- CM[1,2] # falsos negativos
comparacion[1,ii] <- train_perf[1,ii]/dim(training_set)[1]*100
comparacion[2,ii] <- train_perf[2,ii]/dim(training_set)[1]*100
comparacion[3,ii] <- comparacion[2,ii] - comparacion[1,ii]
train_perf[11,ii] <- (CM[1,1]+0)/sum(CM)
}
if (train_perf[5,ii] >= MSE_max){
if (ii == 1){
tiempo <- proc.time()[3] - ptm # Stop the clock
if (tiempo >= T1 || vraisloops == 200){
MSE_max <- MSE_max + 0.01
ptm <- proc.time()[3]
vraisloops <- 0
}
}else if(ii == 2){
tiempo <- proc.time()[3] - ptm
if (tiempo >= T2 || vraisloops == 400){
MSE_max <- MSE_max + 0.01
ptm <- proc.time()[3]
vraisloops <- 0
ii <- 1
print(paste("Rising MSE.max to: ", MSE_max,sep=""))
}
}
writeLines("")
print(paste("Number of trained networks: ", ii,sep=""))
writeLines("")
print(paste("MSE of the trained network: ", round(train_perf[5,ii],3),sep=""))
}else{
writeLines("")
print(paste("Number of trained networks: ", ii,sep=""))
writeLines("")
print(paste("MSE of the trained network: ", round(train_perf[5,ii],3),sep=""))
validation_set$Cala_nnet <- class.ind(validation_set$Primera_Cala)
predicted <- predict(best_net,validation_set)
test_predichas <- as.numeric(predicted[,2] > thres)
CM <- table(data.frame(predicho = test_predichas == 1, real = validation_set$Primera_Cala == 1))
if(sum(dim(CM)) == 4){
test_perf[1,ii] <- CM[1,2]+CM[2,2] # calas observadas
test_perf[2,ii] <- CM[2,1]+CM[2,2] # calas identificadas
test_perf[3,ii] <- CM[2,2] # calas verdaderas
test_perf[4,ii] <- CM[2,1] # calas falsas
test_perf[5,ii] <- sum((predicted[,2] - (as.numeric(validation_set$Primera_Cala)-1))^2)/dim(validation_set)[1]
comparacion[4,ii] <- test_perf[1,ii]/dim(validation_set)[1]*100
comparacion[5,ii] <- test_perf[2,ii]/dim(validation_set)[1]*100
comparacion[6,ii] <- comparacion[2,ii] - comparacion[1,ii]
test_perf[6,ii] <- CM[1,2] # falsos negativos
test_perf[14,ii] <- (CM[1,1]+CM[2,2])/sum(CM)
test_perf[7,ii] <- min(CM[2,1],CM[1,2]) # nÃºmero de calas mal ubicadas
}else{
test_perf[1,ii] <- CM[1,2]+0 # calas observadas
test_perf[2,ii] <- 0 # calas identificadas
test_perf[3,ii] <- 0 # calas verdaderas
test_perf[4,ii] <- 0 # calas falsas
test_perf[5,ii] <- sum((predicted[,2] - (as.numeric(validation_set$Primera_Cala)-1))^2)/dim(validation_set)[1]
comparacion[4,ii] <- test_perf[1,ii]/dim(validation_set)[1]*100
comparacion[5,ii] <- test_perf[2,ii]/dim(validation_set)[1]*100
comparacion[6,ii] <- comparacion[2,ii] - comparacion[1,ii]
test_perf[6,ii] <- CM[1,2] # falsos negativos
test_perf[14,ii] <- (CM[1,1]+0)/sum(CM)
test_perf[7,ii] <- min(0,CM[1,2]) # nÃºmero de calas mal ubicadas
}
writeLines("")
print(paste("MSE of the tested partition: ", round(test_perf[5,ii],3),sep=""))
if (ii == 10){
dif <- test_perf[5,1:ii] - train_perf[5,1:ii]
num = sum(dif > 0.01)
if (num < 8){
ii <- ii + 1
}else{
MSE_max <- MSE_max + 1
ii <- 1
ptm <- proc.time()[3]
vraisloops <- 0
print(paste("Rising MSE.max to: ", MSE_max,sep=""))
}
}else{
ii <- ii + 1
}
}
}
train_perf[7,] <- train_perf[3,]/train_perf[1,] # proporcion de calas verdaderas respecto a las observadas
train_perf[8,] <- train_perf[4,]/train_perf[1,] # proporcion de calas falsas respecto a las observadas
train_perf[9,] <- train_perf[6,]/train_perf[1,] # proporcion de falsos negativos respecto a las calas observadas
train_perf[10,] <- (train_perf[2,] - train_perf[1,])/train_perf[1,] # ratio de la diferencia entre nÃºmero de calas identificadas y observadas, respecto al nÃºmero de calas observadas
test_perf[8,] <- test_perf[2,] - test_perf[1,] # diferencia entre nÃºmero de calas identificadas y observadas
test_perf[9,] <- test_perf[3,]/test_perf[1,] # proporcion de calas verdaderas respecto a las observadas
test_perf[10,] <- test_perf[4,]/test_perf[1,] # proporcion de calas falsas respecto a las observadas
test_perf[11,] <- test_perf[6,]/test_perf[1,] # proporcion de falsos negativos respecto a las calas observadas
test_perf[12,] <- (test_perf[2,] - test_perf[1,])/test_perf[1,] # ratio de la diferencia entre nÃºmero de calas identificadas y observadas, respecto al nÃºmero de calas observadas
test_perf[13,] <- test_perf[7,]/test_perf[1,] # proporcion de calas mal ubicadas respecto al nÃºmero de calas observadas
prom_train <- apply(train_perf,1,mean,na.rm=TRUE)
prom_test <- apply(test_perf,1,mean,na.rm=TRUE)
prom_comp <- apply(comparacion,1,mean,na.rm=TRUE)
prom_co.0 <- prom_co
prom_ci.0 <- prom_ci
prom_co <- prom_test[1]
prom_ci <- prom_test[2]
prom_dif_ratio <- prom_test[12]
}
desv_train <- apply(train_perf,1,sd,na.rm=TRUE)
desv_test <- apply(test_perf,1,sd,na.rm=TRUE)
desv_comp <- apply(comparacion,1,sd,na.rm=TRUE)
# como todas son medias, (incluyendo la del promedio, sacamos intervalo de confianza de media)
error_test <- qt(0.975,df=nb_loop-1)*desv_test/sqrt(nb_loop)
left_test  <- prom_test - error_test
right_test <- prom_test + error_test
error_train<- qt(0.975,df=nb_loop-1)*desv_train/sqrt(nb_loop)
left_train  <- prom_train - error_train
right_train <- prom_train + error_train
error_comp <- qt(0.975,df=nb_loop-1)*desv_comp/sqrt(nb_loop)
left_comp  <- prom_comp - error_comp
right_comp <- prom_comp + error_comp
results_train <- matrix(c(left_test[14],prom_test[14],right_test[14],desv_test[14],
left_test[9],prom_test[9],right_test[9],desv_test[9],
left_test[3],prom_test[3],right_test[3],desv_test[3],
left_test[13],prom_test[13],right_test[13],desv_test[13],
left_test[7],prom_test[7],right_test[7],desv_test[7],
left_test[12],prom_test[12],right_test[12],desv_test[12],
left_test[8],prom_test[8],right_test[8],desv_test[8],
left_comp[4],prom_comp[4],right_comp[4],desv_comp[4],
left_test[1],prom_test[1],right_test[1],desv_test[1],
left_comp[5],prom_comp[5],right_comp[5],desv_comp[5],
left_test[2],prom_test[2],right_test[2],desv_test[2],
left_test[10],prom_test[10],right_test[10],desv_test[10],
left_test[4],prom_test[4],right_test[4],desv_test[4],
left_test[11],prom_test[11],right_test[11],desv_test[11],
left_test[6],prom_test[6],right_test[6],desv_test[6],
left_test[5],prom_test[5],right_test[5],desv_test[5],
left_train[11],prom_train[11],right_train[11],desv_train[11],
left_train[7],prom_train[7],right_train[7],desv_train[7],
left_train[3],prom_train[3],right_train[3],desv_train[3],
left_train[10],prom_train[10],right_train[10],desv_train[10],
left_comp[1],prom_comp[1],right_comp[1],desv_comp[1],
left_train[1],prom_train[1],right_train[1],desv_train[1],
left_comp[2],prom_comp[2],right_comp[2],desv_comp[2],
left_train[2],prom_train[2],right_train[2],desv_train[2],
left_train[8],prom_train[8],right_train[8],desv_train[8],
left_train[4],prom_train[4],right_train[4],desv_train[4],
left_train[9],prom_train[9],right_train[9],desv_train[9],
left_train[6],prom_train[6],right_train[6],desv_train[6],
left_train[5],prom_train[5],right_train[5],desv_train[5]
),nrow=29,ncol=4,byrow=TRUE)
colnames(results_train) <- c("lim_inf","mean","lim_sup","sd")
rownames(results_train) <- c("test_acc_prop","test_cv_prop","test_cv_num","test_mu_prop",
"test_mu_num","test_si_prop","test_si_num","test_co_perc",
"test_co_num","test_ci_perc","test_ci_num","test_cf_prop",
"test_cf_num","test_fn_prop","test_fn_num","test_mse",
"train_acc_prop","train_cv_prop","train_cv_num","train_si_prop",
"train_co_perc","train_co_num","train_ci_perc","train_ci_num",
"train_cf_prop","train_cf_num","train_fn_prop","train_fn_num",
"train_mse")
write.csv(results_train,file=paste0(input_dir,"/TrainInd_neurons_",neurons,".csv",sep=""))
#write.csv(results_train,file=paste0(directory,"/TrainInd_neurons_",neurons,".csv",sep="")) ## change
output$results_train <- results_train
parametros <- matrix(c(nb_loop,neurons,thres),nrow=3,ncol=1)
write.table(parametros,file=paste0(input_dir,"/TrainPar_loops_neurons_thres.txt"),
#write.table(parametros,file=paste0(directory,"/TrainPar_loops_neurons_thres.txt"), # change
row.names=FALSE,col.names=FALSE)
output$parameters <- parametros
cat(paste0("\n","><>><>><>><>><>><>><>><>"))
cat(paste0("\n","><> Artificial Neural Network <><"))
cat(paste0("\n","><>><>><>><>><>><>><>><>","\n","\n"))
nombre <- paste0("TrainInd_Texto_neurons_",neurons,".txt")
sink(nombre)
cat("Result mean for partitions of test:")
cat("\n")
cat("percentage of hits: ", round(prom_test[14]*100,2), "% (", round(left_test[14]*100,2), "%," , round(right_test[14]*100,2), "%)")
cat("\n")
cat("percentage of true sets: ", round(prom_test[9]*100,2), "% (", round(left_test[9]*100,2), "%," , round(right_test[9]*100,2), "%)")
cat("\n")
cat("number of true sets:  ", prom_test[3], " (", round(left_test[3],2), "," , round(right_test[3],2), ")")
cat("\n")
cat("percentage of set bad located: ", round(prom_test[13]*100,2), "% (", round(left_test[13]*100,2), "%," , round(right_test[13]*100,2), "%)")
cat("\n")
cat("number of set bad located:  ", prom_test[7], " (", round(left_test[7],2), "," , round(right_test[7],2), ")")
cat("\n")
cat("percentage of set overidentified: ", round(prom_test[12]*100,2), "% (", round(left_test[12]*100,2), "%," , round(right_test[12]*100,2), "%)")
cat("\n")
cat("number of overidentified sets: ", prom_test[8], " (", round(left_test[8],2), "," , round(right_test[8],2), ")")
cat("\n")
cat("percentage of observed sets: ", round(prom_comp[4],2), "% (", round(left_comp[4],2), "%," , round(right_comp[4],2), "%)")
cat("\n")
cat("number of observed sets: ", prom_test[1], " (", round(left_test[1],2), "," , round(right_test[1],2), ")")
cat("\n")
cat("percentage of identified sets: ", round(prom_comp[5],2), "% (", round(left_comp[5],2), "%," , round(right_comp[5],2), "%)")
cat("\n")
cat("number of identified sets: ", prom_test[2], " (", round(left_test[2],2), "," , round(right_test[2],2), ")")
cat("\n")
cat("percentage of false sets:", round(prom_test[10]*100,2), "% (", round(left_test[10]*100,2), "%," , round(right_test[10]*100,2), "%)")
cat("\n")
cat("number of false sets", prom_test[4], " (", round(left_test[4],2), "," , round(right_test[4],2), ")")
cat("\n")
cat("percentage of false negatives: ", round(prom_test[11]*100,2), "% (", round(left_test[11]*100,2), "%," , round(right_test[11]*100,2), "%)")
cat("\n")
cat("number of false negatives", prom_test[6], " (", round(left_test[6],2), "," , round(right_test[6],2), ")")
cat("\n")
cat("MSE:", round(prom_test[5],3), " (", round(left_test[5],3), "," , round(right_test[5],3), ")")
cat("\n")
cat("\n")
cat("average results for training partitions:")
cat("\n")
cat("percentage of hits: ", round(prom_train[11]*100,2), "% (", round(left_train[11]*100,2), "%," , round(right_train[11]*100,2), "%)")
cat("\n")
cat("percentage of true sets: ", round(prom_train[7]*100,2), "% (", round(left_train[7]*100,2), "%," , round(right_train[7]*100,2), "%)")
cat("\n")
cat("number of overidentified sets:  ", prom_train[3], " (", round(left_train[3],2), "," , round(right_train[3],2), ")")
cat("\n")
cat("percentage of overidentified sets: ", round(prom_train[10]*100,2), "% (", round(left_train[10]*100,2), "%," , round(right_train[10]*100,2), "%)")
cat("\n")
# cat("NÃºmero de calas sobreidentificadas: ", prom.test[8])
cat("percentage of observed sets: ", round(prom_comp[1],2), "% (", round(left_comp[1],2), "%," , round(right_comp[1],2), "%)")
cat("\n")
cat("number of observed sets: ", prom_train[1], " (", round(left_train[1],2), "," , round(right_train[1],2), ")")
cat("\n")
cat("percentage of identified sets: ", round(prom_comp[2],2), "% (", round(left_comp[2],2), "%," , round(right_comp[2],2), "%)")
cat("\n")
cat("number of identified sets: ", prom_train[2], " (", round(left_train[2],2), "," , round(right_train[2],2), ")")
cat("\n")
cat("percentage of false sets:", round(prom_train[8]*100,2), "% (", round(left_train[8]*100,2), "%," , round(right_train[8]*100,2), "%)")
cat("\n")
cat("number of false sets", prom_train[4], " (", round(left_train[4],2), "," , round(right_train[4],2), ")")
cat("\n")
cat("percentage of false negatives: ", round(prom_train[9]*100,2), "% (", round(left_train[9]*100,2), "%," , round(right_train[9]*100,2), "%)")
cat("\n")
cat("number of false negatives", prom_train[6], " (", round(left_train[6],2), "," , round(right_train[6],2), ")")
cat("\n")
cat("MSE:", round(prom_train[5],3), " (", round(left_train[5],3), "," , round(right_train[5],3), ")")
cat("\n")
cat("\n")
cat("Umbral:", thres)
sink()
return(output)
}
nnet_out <- calibration_nnet(data = data, directory = getwd(), neurons=4, MSE_max=0.04, nb_loop = 10)
anho_entrenamiento = 2013; year = 2013
dossier.0  <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
directorio <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
setwd(dossier.0)
dossier.ant <-dossier.0
# "base_2013_final.csv"
#data <- read.table(paste(dossier.ant,"/",'base_',year,'.txt',sep=''),header=FALSE,sep=';')
data <- read.csv(paste(dossier.ant,"/",'base_',year,'_final.csv',sep=''))#,header=FALSE,sep=';')
data <- data[,-which(colnames(data)=="X")]
colnames(data) <- c("Nombre_Barco","Cod_Barco","Fecha_Matlab","Clase_Emision","Lon","Lat","Zona","Vel_VMS","Rumbo_VMS",
"Puerto_0_Mar_1","Dist_Puerto","Dif_Tiempo","Dist_Emisiones","Vel_Cal","Cambio_Rumbo_Calc",
"Lon_Obs_Ini_Cala","Lat_Obs_Ini_Cala","Cala","Primera_Cala","Dist_Cala_Emis","Cod_Viaje_VMS",
"Cod_Viaje_Cruz","Flota","Pesca_Viaje")
anho_entrenamiento = 2013; year = 2013
# dossier.0  <- paste("E:/2016/red_neuronal_input/",year, sep = "")
# directorio <- paste("E:/2016/red_neuronal_input/",year, sep = "")
# dossier.0  <- paste("I:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
# directorio <- paste("I:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
dossier.0  <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
directorio <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
setwd(dossier.0)
dossier.ant <-dossier.0
# "base_2013_final.csv"
#data <- read.table(paste(dossier.ant,"/",'base_',year,'.txt',sep=''),header=FALSE,sep=';')
data <- read.csv(paste(dossier.ant,"/",'base_',year,'_final.csv',sep=''))#,header=FALSE,sep=';')
data <- data[,-which(colnames(data)=="X")]
colnames(data) <- c("Nombre_Barco","Cod_Barco","Fecha_Matlab","Clase_Emision","Lon","Lat","Zona","Vel_VMS","Rumbo_VMS",
"Puerto_0_Mar_1","Dist_Puerto","Dif_Tiempo","Dist_Emisiones","Vel_Cal","Cambio_Rumbo_Calc",
"Lon_Obs_Ini_Cala","Lat_Obs_Ini_Cala","Cala","Primera_Cala","Dist_Cala_Emis","Cod_Viaje_VMS",
"Cod_Viaje_Cruz","Flota","Pesca_Viaje")
nnet_out <- calibration_nnet(data = data, directory = getwd(), neurons=4, MSE_max=0.04, nb_loop = 10)
library(vmsR)
anho_entrenamiento = 2013; year = 2013
dossier.0  <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
directorio <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
setwd(dossier.0)
dossier.ant <-dossier.0
data <- read.csv(paste(dossier.ant,"/",'base_',year,'_final.csv',sep=''))#,header=FALSE,sep=';')
data <- data[,-which(colnames(data)=="X")]
colnames(data) <- c("Nombre_Barco","Cod_Barco","Fecha_Matlab","Clase_Emision","Lon","Lat","Zona","Vel_VMS","Rumbo_VMS",
"Puerto_0_Mar_1","Dist_Puerto","Dif_Tiempo","Dist_Emisiones","Vel_Cal","Cambio_Rumbo_Calc",
"Lon_Obs_Ini_Cala","Lat_Obs_Ini_Cala","Cala","Primera_Cala","Dist_Cala_Emis","Cod_Viaje_VMS",
"Cod_Viaje_Cruz","Flota","Pesca_Viaje")
nnet_out <- calibration_nnet(data = data, directory = getwd(), neurons=4, MSE_max=0.04, nb_loop = 10)
head(data)
head(data)
unique(data$Nombre_Barco)
length(unique(data$Nombre_Barco))
c("CAROL", "PATRICIA", "FIORELLA", "XIMENA","MARIA","FRANCHESCA","LUZ","FERIHE","CECILIA","ALEXIA","XIOMARA","PAOLA",
"KRISTEL","GERALDINE","KIARA","KAREN","CRISCELY","ANITA","YAJAIRA","ALMENDRA","DIANA","JENIFER","JESYCA", "YVONNE",
"MACARENA","ELIZABETH", "AMPARITO","SOFIA","AKEMI", "CINTHIA", "ISABEL", "ERICKA", "VERONICA","ANGELITA","GRECIA",
"KARLA", "VERALUCIA", "ESTEFANY", "SANDRA", "SAORI", "BULMA", "MILAGROS", "WENDY", "VANIA", "BERENICE", "BEATRIZ",
"BRENDA","DANIELA", "ADRIANA", "FERNANDA", "AMELIA", "CHARITO", "RAYSA", "SIRENA")
c("MARIA","FRANCHESCA","LUZ","FERIHE","CECILIA","ALEXIA","XIOMARA","PAOLA",
"KRISTEL","GERALDINE","KIARA","KAREN","CRISCELY","ANITA","YAJAIRA","ALMENDRA","DIANA","JENIFER","JESYCA", "YVONNE",
"MACARENA","ELIZABETH", "AMPARITO","SOFIA","AKEMI", "CINTHIA", "ISABEL", "ERICKA", "VERONICA","ANGELITA","GRECIA",
"KARLA", "VERALUCIA", "ESTEFANY", "SANDRA", "SAORI", "BULMA", "MILAGROS", "WENDY", "VANIA", "BERENICE", "BEATRIZ",
"BRENDA","DANIELA", "ADRIANA", "FERNANDA", "AMELIA", "CHARITO", "SIRENA", "CAROL", "PATRICIA", "FIORELLA", "XIMENA")
nombres2 <- c("MARIA","FRANCHESCA","LUZ","FERIHE","CECILIA","ALEXIA","XIOMARA","PAOLA",
"KRISTEL","GERALDINE","KIARA","KAREN","CRISCELY","ANITA","YAJAIRA","ALMENDRA","DIANA","JENIFER","JESYCA", "YVONNE",
"MACARENA","ELIZABETH", "AMPARITO","SOFIA","AKEMI", "CINTHIA", "ISABEL", "ERICKA", "VERONICA","ANGELITA","GRECIA",
"KARLA", "VERALUCIA", "ESTEFANY", "SANDRA", "SAORI", "BULMA", "KATY", "WENDY", "VANIA", "BERENICE", "BEATRIZ",
"BRENDA","DANIELA", "ADRIANA", "FERNANDA", "AMELIA", "CHARITO", "SIRENA", "CAROL", "PATRICIA", "FIORELLA", "XIMENA")
table(nombres2)
unique(data$Nombre_Barco)
i = 1
unique(data$Nombre_Barco)[i]
data[data$Nombre_Barco == unique(data$Nombre_Barco)[i], "Nombre_Barco"]
seq_along(unique(data$Nombre_Barco))
unique(data$Nombre_Barco)[i]
data[data$Nombre_Barco == unique(data$Nombre_Barco)[i], "Nombre_Barco"]
for(i in seq_along(unique(data$Nombre_Barco))){
data[data$Nombre_Barco == unique(data$Nombre_Barco)[i], "Nombre_Barco"] <- nombres2[i]
}
data$Nombre_Barco <- as.character(data$Nombre_Barco)
for(i in seq_along(unique(data$Nombre_Barco))){
data[data$Nombre_Barco == unique(data$Nombre_Barco)[i], "Nombre_Barco"] <- nombres2[i]
}
nombres2 <- c("MARIA","FRANCHESCA","LUZ","FERIHE","CECILIA","ALEXIA","XIOMARA","PAOLA",
"KRISTEL","GERALDINE","KIARA","KAREN","CRISCELY","ANITA","YAJAIRA","ALMENDRA","DIANA","JENIFER","JESYCA", "YVONNE",
"MACARENA","ELIZABETH", "AMPARITO","SOFIA","AKEMI", "CINTHIA", "ISABEL", "ERICKA", "VERONICA","ANGELITA","GRECIA",
"KARLA", "VERALUCIA", "ESTEFANY", "SANDRA", "SAORI", "BULMA", "KATY", "WENDY", "VANIA", "BERENICE", "BEATRIZ",
"BRENDA","DANIELA", "ADRIANA", "FERNANDA", "AMELIA", "CHARITO", "SIRENA", "CAROL", "PATRICIA", "FIORELLA", "XIMENA")
data$Nombre_Barco
str(data$Nombre_Barco)
data$Nombre_Barco
anho_entrenamiento = 2013; year = 2013
# dossier.0  <- paste("E:/2016/red_neuronal_input/",year, sep = "")
# directorio <- paste("E:/2016/red_neuronal_input/",year, sep = "")
# dossier.0  <- paste("I:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
# directorio <- paste("I:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
dossier.0  <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
directorio <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
setwd(dossier.0)
dossier.ant <-dossier.0
# "base_2013_final.csv"
#data <- read.table(paste(dossier.ant,"/",'base_',year,'.txt',sep=''),header=FALSE,sep=';')
data <- read.csv(paste(dossier.ant,"/",'base_',year,'_final.csv',sep=''))#,header=FALSE,sep=';')
data <- data[,-which(colnames(data)=="X")]
colnames(data) <- c("Nombre_Barco","Cod_Barco","Fecha_Matlab","Clase_Emision","Lon","Lat","Zona","Vel_VMS","Rumbo_VMS",
"Puerto_0_Mar_1","Dist_Puerto","Dif_Tiempo","Dist_Emisiones","Vel_Cal","Cambio_Rumbo_Calc",
"Lon_Obs_Ini_Cala","Lat_Obs_Ini_Cala","Cala","Primera_Cala","Dist_Cala_Emis","Cod_Viaje_VMS",
"Cod_Viaje_Cruz","Flota","Pesca_Viaje")
str(data$Nombre_Barco)
levels(data$Nombre_Barco)
table(is.na(data$Nombre_Barco))
length(unique(data$Nombre_Barco))
length(nombres2)
str(nombres2)
names(nombres2)
seq_along(unique(data$Nombre_Barco))
data$Nombre_Barco <- as.character(data$Nombre_Barco)
for(i in seq_along(unique(data$Nombre_Barco))){
data[data$Nombre_Barco == unique(data$Nombre_Barco)[i], "Nombre_Barco"] <- nombres2[i]
}
data$Nombre_Barco
table(data$Nombre_Barco )
table(is.na(data$Nombre_Barco ))
head(data)
data$Cod_Barco
(data$Cod_Barco+10000)/2
(data$Cod_Barco*10000)/2
(data$Cod_Barco*1000)/2
data$Cod_Barco <- (data$Cod_Barco*1000)/2
head(data)
table(data$Nombre_Barco)
getwd()
save(data, file = "C:/pablo/D/github/vmsR/data_vms.R")
data_vms <- data
save(data_vms, file = "C:/pablo/D/github/vmsR/data/data_vms.R")
#   "KARLA", "VERALUCIA", "ESTEFANY", "SANDRA", "SAORI", "BULMA", "KATY", "WENDY", "VANIA", "BERENICE", "BEATRIZ",
#   "BRENDA","DANIELA", "ADRIANA", "FERNANDA", "AMELIA", "CHARITO", "SIRENA", "CAROL", "PATRICIA", "FIORELLA", "XIMENA")
#
# data$Nombre_Barco <- as.character(data$Nombre_Barco)
# for(i in seq_along(unique(data$Nombre_Barco))){
#   data[data$Nombre_Barco == unique(data$Nombre_Barco)[i], "Nombre_Barco"] <- nombres2[i]
# }
#
# data$Cod_Barco <- (data$Cod_Barco*1000)/2
# data_vms <- data
save(data_vms, file = "C:/pablo/D/github/vmsR/data/data_vms.RData")
anho_entrenamiento = 2013; year = 2013
dossier.0  <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
directorio <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
setwd(dossier.0)
dossier.ant <-dossier.0
data <- read.csv(paste(dossier.ant,"/",'base_',year,'_final.csv',sep=''))
data <- data[,-which(colnames(data)=="X")]
colnames(data) <- c("Nombre_Barco","Cod_Barco","Fecha_Matlab","Clase_Emision","Lon","Lat","Zona","Vel_VMS","Rumbo_VMS",
"Puerto_0_Mar_1","Dist_Puerto","Dif_Tiempo","Dist_Emisiones","Vel_Cal","Cambio_Rumbo_Calc",
"Lon_Obs_Ini_Cala","Lat_Obs_Ini_Cala","Cala","Primera_Cala","Dist_Cala_Emis","Cod_Viaje_VMS",
"Cod_Viaje_Cruz","Flota","Pesca_Viaje")
nombres2 <- c("MARIA","FRANCHESCA","LUZ","FERIHE","CECILIA","ALEXIA","XIOMARA","PAOLA",
"KRISTEL","GERALDINE","KIARA","KAREN","CRISCELY","ANITA","YAJAIRA","ALMENDRA","DIANA","JENIFER","JESYCA", "YVONNE",
"MACARENA","ELIZABETH", "AMPARITO","SOFIA","AKEMI", "CINTHIA", "ISABEL", "ERICKA", "VERONICA","ANGELITA","GRECIA",
"KARLA", "VERALUCIA", "ESTEFANY", "SANDRA", "SAORI", "BULMA", "KATY", "WENDY", "VANIA", "BERENICE", "BEATRIZ",
"BRENDA","DANIELA", "ADRIANA", "FERNANDA", "AMELIA", "CHARITO", "SIRENA", "CAROL", "PATRICIA", "FIORELLA", "XIMENA")
data$Nombre_Barco <- as.character(data$Nombre_Barco)
for(i in seq_along(unique(data$Nombre_Barco))){
data[data$Nombre_Barco == unique(data$Nombre_Barco)[i], "Nombre_Barco"] <- nombres2[i]
}
data$Cod_Barco <- (data$Cod_Barco*1000)/2
data_vms <- data
save(data_vms, file = "C:/pablo/D/github/vmsR/data/data_vms.RData")
library(vmsR)
head(data_vms)
head(data_vms)
unique(data$Cod_Viaje_VMS)
anho_entrenamiento = 2013; year = 2013
dossier.0  <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
directorio <- paste("D:/disco_rocio/disco_duro2/2016/red_neuronal_input/",year, sep = "")
setwd(dossier.0)
dossier.ant <-dossier.0
data <- read.csv(paste(dossier.ant,"/",'base_',year,'_final.csv',sep=''))
data <- data[,-which(colnames(data)=="X")]
head(data)
unique(data$Cod.Barco)
unique(data$Cod.Viaje.VMS)
unique(data$Cod.Viaje.Cruz)
head(data_vms)
table(data_vms$Cod_Barco, data_vms$Cod_Viaje_VMS)
library(vmsR)
head(data_vms)
getwd()
