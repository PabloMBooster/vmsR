dist_ortodromica
y1
y2
estima_dc2
estima_dc2(lon = c(x1,x2), lat = c(y1,y2))
estima_dc2
estima_dc2
PERU_SP
require(fenix)
estima_distance
estima_distance(x = x1, y = y1,x1 = x2,y1 = y2)
dist_ortodromica(x1 = x1, y1 = y1,x2 = x2,y2 = y2)
estima_distance(x = x1, y = y1,x1 = x2,y1 = y2)
distEuclidiana
fenix:::distEuclidiana(x = x1, y = y1,x1 = x2,y1 = y2)
estima_dc2
estima_distance
dist_ortodromica <- function (x1,y1,x2,y2)
{
phi1 = x1*pi/180
phi2 = x2*pi/180
lambda1 = y1*pi/180
lambda2 = y2*pi/180
diflambda = abs(lambda1-lambda2)
grad = acos(sin(phi1)*sin(phi2)+cos(phi1)*cos(phi2)*cos(diflambda))
gradinrad = 180 * grad/pi
d = (60 * gradinrad)
#r = 3440.0696544 # radio de la tierra en millas nauticas
#d = r*angle
## https://en.wikipedia.org/wiki/Great-circle_distance
return(d)
}
estima_distance(x = x1, y = y1,x1 = x2,y1 = y2)
dist_ortodromica(x1 = x1, y1 = y1,x2 = x2,y2 = y2)
dist_ortodromica <- function (x1,y1,x2,y2)
{
phi1 = x1*pi/180
phi2 = x2*pi/180
lambda1 = y1*pi/180
lambda2 = y2*pi/180
diflambda = lambda1-lambda2
grad = acos(sin(phi1)*sin(phi2)+cos(phi1)*cos(phi2)*cos(diflambda))
gradinrad = 180 * grad/pi
d = (60 * gradinrad)
#r = 3440.0696544 # radio de la tierra en millas nauticas
#d = r*angle
## https://en.wikipedia.org/wiki/Great-circle_distance
return(d)
}
estima_distance(x = x1, y = y1,x1 = x2,y1 = y2)
dist_ortodromica(x1 = x1, y1 = y1,x2 = x2,y2 = y2)
dist_ortodromica <- function (x1,y1,x2,y2, type = 1)
{
A1 = x1*pi/180
A2 = x2*pi/180
B1 = y1*pi/180
B2 = y2*pi/180
grad = acos(sin(B1)*sin(B2)+cos(B1)*cos(B2)*cos(A1-A2))
if(type == 1){
gradinrad = 180 * grad/pi
d = (60 * gradinrad)
}
if(type == 2){
r = 3440.0696544 # radio terrestre en millas nauticas
d = r*grad # ver https://en.wikipedia.org/wiki/Great-circle_distance
}
return(d)
}
get_course <- function(lon, lat){
vectorCourse <- NULL
vectorCourse[1] <- NA
for(i in 2:length(lon)){
x1 <-  lon[i]
y1 <-  lat[i]
x2 <-  lon[i-1]
y2 <-  lat[i-1]
diffX  <- abs(x2-x1)
cotgC  <- ((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
tangC  <- 1/cotgC
course <- 360 - atan(tangC)
vectorCourse <- rbind(vectorCourse,course)
}
vectorCourse <- as.vector(vectorCourse)
return(vectorCourse)
}
y1 <-31 + (5+40/60)/60
x1 <-80 + (27+35/60)/60
y2 <-38 + (15+20/60)/60
x2 <-90 + (40+40/60)/60
dist_ortodromica(x1 = x1, y1 = y1,x2 = x2,y2 = y2)
estima_distance(x = x1, y = y1,x1 = x2,y1 = y2)
fenix:::distEuclidiana(x = x1, y = y1,x1 = x2,y1 = y2)
library(vmsR)
## PAQUETES
require(vmsR)
head(data_vms_raw) # 1080962 filas
data_vms_raw2 <- data_vms_raw[data_vms_raw$Lat < 10,]
data_vms_raw2 <- data_vms_raw2[data_vms_raw2$Lon > -100 & data_vms_raw2$Lon < -70,] # 1071874
barcos     <- unique(data_vms_raw2$Name_vessel)
new_barcos <- paste0("vessel_",1:length(barcos))
codigo     <- data.frame(codigo = as.character(data_vms_raw2$Cod_Barco))
N          <- apply(codigo,1, extract_number)
data_vms_raw2$Cod_Barco <- N*10/5
data_vms_raw3 <- data_vms_raw2
data_vms_raw3$Name_vessel <- NA
for(i in seq_along(unique(data_vms_raw2$Name_vessel))){
data_vms_raw3$Name_vessel[which(data_vms_raw2$Name_vessel %in% unique(data_vms_raw2$Name_vessel)[i])] <- new_barcos[i]
}
mapa_peru()
dim(data_vms_raw3)
output
dim(output)
head(output)
head(data_vms_raw3)
head(data_vms_raw3)
write.csv(data_vms_raw3, "C:/Users/fenix/Desktop/clases VMS/data_vms_raw_emiHora.csv")
vmsR::calculate_course
require(vmsR)
head(data_vms)
base_barco <- data_vms[data_vms$Cod_Barco %in% unique(data_vms$Cod_Barco)[1],]
head(base_barco)
plot(base_barco$Lon, base_barco$Lat)
c1 <- get_course(lon = base_barco$Lon,lat = base_barco$Lat)
c2 <- calculate_course(lon = base_barco$Lon,lat = base_barco$Lat)
c1
c2
cbind(c1,c2)
map_vms(x = base_barco$Lon,y = base_barco$Lat,velocity = base_barco$Vel_Cal)
map_vms
x11()
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1])
base_barco$Lon[-length(base_barco$Lon)]
base_barco$Lat[-length(base_barco$Lon)]
base_barco$Lon[-1]
base_barco$Lat[-1]
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1])
x11()
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], cex = 0.7)
x11()
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], cex = 0.7)
x11()
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1])
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1])
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1])
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.adj = 0.2)
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.adj = 0.1)
plot(base_barco$Lon, base_barco$Lat, col = "white")
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.adj = 0.1)
plot(base_barco$Lon, base_barco$Lat, col = "white")
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.length = 0.2)
text(base_barco$Lon, base_barco$Lat, labels = c1)
round(c1)
plot(base_barco$Lon, base_barco$Lat, col = "white")
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.length = 0.2)
text(base_barco$Lon, base_barco$Lat, labels = round(c1), cex = 0.4)
plot(base_barco$Lon, base_barco$Lat, col = "white")
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.length = 0.2, col = 3)
text(base_barco$Lon, base_barco$Lat, labels = round(c1), cex = 0.4, col = 1)
text(base_barco$Lon, base_barco$Lat, labels = round(c1), cex = 0.6, col = 1)
c1
text(base_barco$Lon, base_barco$Lat, labels = round(c2), cex = 0.6, col = 1)
c1
c2
round(c2)
plot(base_barco$Lon, base_barco$Lat, col = "white")
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.length = 0.2, col = 3)
text(base_barco$Lon, base_barco$Lat, labels = round(c2), cex = 0.6, col = 1)
plot(base_barco$Lon, base_barco$Lat, col = "white")
Arrows(x0 = base_barco$Lon[-length(base_barco$Lon)],
y0 = base_barco$Lat[-length(base_barco$Lon)],
x1 = base_barco$Lon[-1],
y1 = base_barco$Lat[-1], arr.length = 0.2, col = 3)
text(base_barco$Lon, base_barco$Lat, pos = 2,
labels = round(c2), cex = 0.6, col = 1)
get_course
calculate_course
calculate_course
head(base_barco)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
vectorRumbo[1] <- NA
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sen(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
}
return(theta)}
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
vectorRumbo[1] <- NA
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sen(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
}
return(theta)}
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
vectorRumbo[1] <- NA
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sen(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
}
return(theta)
}
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
vectorRumbo[1] <- NA
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
}
return(theta)
}
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
c3
base_barco$Dist_Emisiones
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
vectorRumbo[1] <- NA
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
vectorRumbo <- rbind(vectorRumbo, theta)
}
return(vectorRumbo)
}
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
c3
vectorRumbo <- NULL
length(lon)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
vectorRumbo <- rbind(vectorRumbo, theta)
}
vectorRumbo[1] <- NA
return(vectorRumbo)
}
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
c2 <- calculate_course(lon = base_barco$Lon,lat = base_barco$Lat)
cbind(c2, c3)
c3
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
vectorRumbo <- rbind(vectorRumbo, theta)
}
vectorRumbo[1] <- NA
vectorRumbo <- as.numeric(vectorRumbo)
return(vectorRumbo)
}
cbind(2,c3)
cbind(c2,c3)
c2 <- calculate_course(lon = base_barco$Lon,lat = base_barco$Lat)
cbind(c2,c3)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i-1]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
# if(diffLon <= 0){
#   theta = theta
# }else{
#   theta = 360-theta
# }
vectorRumbo <- rbind(vectorRumbo, theta)
}
vectorRumbo[1] <- NA
vectorRumbo <- as.numeric(vectorRumbo)
return(vectorRumbo)
}
c2 <- calculate_course(lon = base_barco$Lon,lat = base_barco$Lat)
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
cbind(c2,c3)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
vectorRumbo <- rbind(vectorRumbo, theta)
}
vectorRumbo[1] <- NA
vectorRumbo <- as.numeric(vectorRumbo)
return(vectorRumbo)
}
c2 <- calculate_course(lon = base_barco$Lon,lat = base_barco$Lat)
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
cbind(c2,c3)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
if(diffLon <= 0){
theta = theta
}else{
theta = 360-theta
}
vectorRumbo <- rbind(vectorRumbo, theta)
}
vectorRumbo[1] <- NA
vectorRumbo <- as.numeric(vectorRumbo)
return(vectorRumbo)
}
c2 <- calculate_course(lon = base_barco$Lon,lat = base_barco$Lat)
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
cbind(c2,c3)
rumbo <- function(lon, lat, dist){
vectorRumbo <- NULL
for(i in 2:length(lon)){
rad <- pi/180
x2 <-  lon[i]*rad
y2 <-  lat[i]*rad
x1 <-  lon[i-1]*rad
y1 <-  lat[i-1]*rad
d1 <-  dist[i]
theta <- (180/pi)*acos((sin(y2)-sin(y1)*cos(d1))/(cos(y1)*sin(d1)))
diffLon <- x1-x2
# if(diffLon <= 0){
#   theta = theta
# }else{
#   theta = 360-theta
# }
vectorRumbo <- rbind(vectorRumbo, theta)
}
vectorRumbo[1] <- NA
vectorRumbo <- as.numeric(vectorRumbo)
return(vectorRumbo)
}
c2 <- calculate_course(lon = base_barco$Lon,lat = base_barco$Lat)
c3 <- rumbo(lon = base_barco$Lon, lat = base_barco$Lat, dist = base_barco$Dist_Emisiones)
cbind(c2,c3)
calculate_course
require(SISESATools)
estimateAngle <- function(x,y){
vec_angle <- NULL
for(z in 2:(length(x)-1)){
A <- matrix(NA,nrow = 2)
B <- matrix(NA,nrow = 2)
X1 <- as.matrix(x[c(z-1,z)])
Y1 <- as.matrix(y[c(z-1,z)])
X2 <- as.matrix(x[c(z,z+1)])
Y2 <- as.matrix(y[c(z,z+1)])
A[1] <- X1[1]-X1[2]
A[2] <- Y1[1]-Y1[2]
B[1] <- X2[2]-X2[1]
B[2] <- Y2[2]-Y2[1]
angle <- equationAngle(t(A),B)
vec_angle <- rbind(vec_angle,angle)
}
return(vec_angle)
}
equationAngle
equationAngle <- function(x,y){
dot.prod <- x%*%y
norm.x <- norm(x,type="2")
norm.y <- norm(y,type="2")
theta <- acos(dot.prod / (norm.x * norm.y))*180/pi
return(theta)
}
estimateAngle(x =base_barco$Lon,y = base_barco$Lat)
c4 <- estimateAngle(x =base_barco$Lon,y = base_barco$Lat)
cbind(c2,c3, c4)
c3
library(vmsR)
