diametro = 2*pi*r
diametro
dist_ortodromica3 <- function (x1,y1,x2,y2)
{
a = 90-y1
b = 90-y2
P = x1 + x2
cosp = cos(a)*cos(b)+sin(1)*sin(b)*cos(P)
p    = acos(cosp)
r = 3440.0696544 # radio de la tierra en millas nauticas
diametro = 2*pi*r
dist_grado = diametro/360
dist = p*dist_grado
return(dist)
}
dist_ortodromica <- function (x1,y1,x2,y2)
{
phi1 = x1*pi/180
phi2 = x2*pi/180
lambda1 = y1*pi/180
lambda2 = y2*pi/180
diflambda = abs(lambda1-lambda2)
angle = acos(sin(phi1)*sin(phi2)+cos(phi1)*cos(phi2)*cos(diflambda))
r = 3440.0696544 # radio de la tierra en millas nauticas
d = r*angle
## https://en.wikipedia.org/wiki/Great-circle_distance
return(d)
}
dist_ortodromica2 <- function (x1,y1,x2,y2)
{
lon.mn1 = -x1 * 60 * cos(-y1 * pi/180)
lon.mn2 = -x2 * 60 * cos(-y2 * pi/180)
lat.mn1 = -y1 * 60
lat.mn2 = -y2 * 60
out = sqrt((lon.mn1 - lon.mn2)^2 + (lat.mn1 - lat.mn2)^2)
return(out)
}
dist_ortodromica3 <- function (x1,y1,x2,y2)
{
a = 90-y1
b = 90-y2
P = x1 + x2
cosp = cos(a)*cos(b)+sin(1)*sin(b)*cos(P)
p    = acos(cosp)
r = 3440.0696544 # radio de la tierra en millas nauticas
diametro = 2*pi*r
dist_grado = diametro/360
dist = p*dist_grado
return(dist)
}
dist_ortodromica(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica2(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica3(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica3 <- function (x1,y1,x2,y2)
{
a = 90-y1
b = 90-y2
P = x1 + x2
cosp = cos(a)*cos(b)+sin(a)*sin(b)*cos(P)
p    = acos(cosp)
r = 3440.0696544 # radio de la tierra en millas nauticas
diametro = 2*pi*r
dist_grado = diametro/360
dist = p*dist_grado
return(dist)
}
dist_ortodromica3(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica2(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica3(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica2(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica3(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica2(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
dist_ortodromica3(x1 = lon1, y1 = lat1, x2 = lon2, y2 = lat2)
distAB(lonA = lon1,latA = lat2,lonB = lon2,latB = lat2)
estima_distance(x = lon1, y = lat1, x1 = lon2, y1 = lat2)
d1 <- distm (c(lon1, lat1), c(lon2, lat2), fun = distGeo)*kmtoMN
d
d1
library(vmsR)
# DEMO --------------------------------------------------------------------
require(vmsR)
data_vms_pro <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
x <- seq(-3, 7, by = 1/8)
x
tx <- cbind(x, cos(pi*x), cospi(x), sin(pi*x), sinpi(x),
tan(pi*x), tanpi(x), deparse.level=2)
tx
dist_ortodromica0 <- function (x1,y1,x2,y2)
{
cosD = acos(sin(y1)*sin(y2)+cos(y1)*cos(y2)*cos(abs(x1-x2)))
d = cosD*60
return(d)
}
lon1 <- data_vms_raw$Lon[1]
lon2 <- data_vms_raw$Lon[150]
lat1 <- data_vms_raw$Lat[1]
lat2 <- data_vms_raw$Lat[150]
x1 <- data_vms_raw$Lon[1]
x2 <- data_vms_raw$Lon[150]
y1 <- data_vms_raw$Lat[1]
y2 <- data_vms_raw$Lat[150]
dist_ortodromica0(x1,y1,x2,y2)
dist_ortodromica(x1,y1,x2,y2)
dist_ortodromica2(x1,y1,x2,y2)
dist_ortodromica3(x1,y1,x2,y2)
x1 <- data_vms_raw$Lon[1]
x2 <- data_vms_raw$Lon[150]
y1 <- data_vms_raw$Lat[1]
y2 <- data_vms_raw$Lat[150]
dist_ortodromica0(x1,y1,x2,y2)
dist_ortodromica(x1,y1,x2,y2)
dist_ortodromica2(x1,y1,x2,y2)
dist_ortodromica3(x1,y1,x2,y2)
rumbo
vmsR:::calculate_course
atan
get_course <- function(lon, lat){
vectorCourse <- NULL
vectorCourse[1] <- NA
for(i in 2:length(lon)){
x2 <-  lon[i]
y2 <-  lat[i]
x1 <-  lon[i-1]
y1 <-  lat[i-1]
diffX  <- abs(x1-x2)
cotgC  <- (cos(y1)*cos(y2)-sin(y1)*cos(diffX))/sin(diffX)
tangC  <- 1/cotgC
course <- 360 - atan(tangC)
vectorCourse <- rbind(vectorCourse,course)
}
vectorRumbo <- as.vector(vectorRumbo)
return(vectorRumbo)
}
calculate_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
course1 <- calculate_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
course2 <- get_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
get_course <- function(lon, lat){
vectorCourse <- NULL
vectorCourse[1] <- NA
for(i in 2:length(lon)){
x2 <-  lon[i]
y2 <-  lat[i]
x1 <-  lon[i-1]
y1 <-  lat[i-1]
diffX  <- abs(x1-x2)
cotgC  <- (cos(y1)*cos(y2)-sin(y1)*cos(diffX))/sin(diffX)
tangC  <- 1/cotgC
course <- 360 - atan(tangC)
vectorCourse <- rbind(vectorCourse,course)
}
vectorCourse <- as.vector(vectorCourse)
return(vectorCourse)
}
course2 <- get_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
cbind(course1, course2)
lon = data_vms_pro$Lon[1:100]
lat = data_vms_pro$Lat[1:100]
vectorCourse <- NULL
vectorCourse[1] <- NA
i = 2
x2 <-  lon[i]
y2 <-  lat[i]
x1 <-  lon[i-1]
y1 <-  lat[i-1]
diffX  <- abs(x1-x2)
diffX
x1
x2
i = 10
x2 <-  lon[i]
y2 <-  lat[i]
x1 <-  lon[i-1]
y1 <-  lat[i-1]
diffX  <- abs(x1-x2)
diffX
cotgC  <- (cos(y1)*cos(y2)-sin(y1)*cos(diffX))/sin(diffX)
tangC  <- 1/cotgC
tangC
atan(tangC)
cos(y1)
cos(y2)
sin(y1)*cos(diffX)
tan
((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
cotgC  <- ((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
tangC  <- 1/cotgC
tangC
cotgC  <- ((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
cotgC
tangC  <- 1/cotgC
tangC
atan(tangC)
((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
(cos(y1)*tan(y2))
(sin(y1)*cos(diffX)))
(sin(y1)*cos(diffX))
((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))
sin(diffX)
((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
1/cotgC
cotgC  <- ((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
tangC  <- 1/cotgC
atan(tangC)
get_course <- function(lon, lat){
vectorCourse <- NULL
vectorCourse[1] <- NA
for(i in 2:length(lon)){
x2 <-  lon[i]
y2 <-  lat[i]
x1 <-  lon[i-1]
y1 <-  lat[i-1]
diffX  <- abs(x2-x1)
cotgC  <- ((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
tangC  <- 1/cotgC
course <- 360 - atan(tangC)
vectorCourse <- rbind(vectorCourse,course)
}
vectorCourse <- as.vector(vectorCourse)
return(vectorCourse)
}
course1 <- calculate_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
course2 <- get_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
cbind(course1, course2)
get_course <- function(lon, lat){
vectorCourse <- NULL
vectorCourse[1] <- NA
for(i in 2:length(lon)){
x1 <-  lon[i]
y1 <-  lat[i]
x2 <-  lon[i-1]
y2 <-  lat[i-1]
diffX  <- abs(x2-x1)
cotgC  <- ((cos(y1)*tan(y2))-(sin(y1)*cos(diffX)))/sin(diffX)
tangC  <- 1/cotgC
course <- 360 - atan(tangC)
vectorCourse <- rbind(vectorCourse,course)
}
vectorCourse <- as.vector(vectorCourse)
return(vectorCourse)
}
course1 <- calculate_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
course2 <- get_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
cbind(course1, course2)
x2 <-  lon[i]
y2 <-  lat[i]
x1 <-  lon[i-1]
y1 <-  lat[i-1]
y   <- sin((x2-x1)*pi/180) * cos(y2*pi/180)
x   <- cos(y1*pi/180) * sin(y2*pi/180) - sin(y1*pi/180) * cos(y2*pi/180) * cos((x2-x1)*pi/180)
Rumbo <- atan2(y,x)*180/pi
Rumbo
Rumbo <- (Rumbo + 360)%%360
Rumbo
lon[i]
lat[i]
lon[i-1]
lat[i-1]
sin((x2-x1)*pi/180) * cos(y2*pi/180)
cos(y1*pi/180) * sin(y2*pi/180) - sin(y1*pi/180) * cos(y2*pi/180) * cos((x2-x1)*pi/180)
atan2(y,x)*180/pi
Rumbo <- atan2(y,x)*180/pi
Rumbo
Rumbo + 360
(Rumbo + 360)%%360
Rumbo
library(vmsR)
library(vmsR)
require(vmsR)
data(data_vms_raw)
data_vms_pro <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
# x1 <- data_vms_raw$Lon[1]
# x2 <- data_vms_raw$Lon[150]
# y1 <- data_vms_raw$Lat[1]
# y2 <- data_vms_raw$Lat[150]
plot(x1,y1)
x1 <- data_vms_raw$Lon[1]
x2 <- data_vms_raw$Lon[150]
y1 <- data_vms_raw$Lat[1]
y2 <- data_vms_raw$Lat[150]
plot(x1,y1)
points(x2,y2)
plot(c(x1,x2),c(y1,y2))
segments(x0 = x1,y0 = y1,x1 = x1,y1 = y1)
segments(x0 = x1,y0 = y1,x1 = x2,y1 = y2)
arrows(x0 = x1,y0 = y1,x1 = x2,y1 = y2)
course1 <- calculate_course(lon = c(x1,x2), lat = c(y1,y2))
course1
course2 <- get_course(lon = data_vms_pro$Lon[1:100], lat = data_vms_pro$Lat[1:100])
course2
course1 <- calculate_course(lon = c(x1,x2), lat = c(y1,y2))
course2 <- get_course(lon = c(x1,x2), lat = c(y1,y2))
course2
course1
head(data_vms_pro)
str(data_vms_pro)
data_vms_tra <- identify_trip(data = data_vms_pro, vharbor = 2, rmin = 6, hmax = 2.7)
dim(data_vms_tra)
dim(data_vms_pro)
head(data_vms_tra <- identify_trip(data = data_vms_pro, vharbor = 2, rmin = 6, hmax = 2.7)
)
head(data_vms_tra)
data_trip    <- data_vms_tra[data_vms_tra$Cod_Barco == unique(data_vms_tra$Cod_Barco)[5],]
dim(data_trip)
data_vms_trip    <- data_vms_tra[data_vms_tra$Cod_Barco == unique(data_vms_tra$Cod_Barco)[5],]
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
dim(data_vms_trip)
data_vms_trip$id
data_vms_trip    <- data_vms_tra[data_vms_tra$Cod_Barco == unique(data_vms_tra$trip)[5],]
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
data_vms_trip
data_vms_tra$trip
data_vms_trip    <- data_vms_tra[data_vms_tra$Cod_Barco == data_vms_tra$trip[1],]
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
data_vms_trip    <- data_vms_tra[data_vms_tra$Cod_Barco == data_vms_tra$trip[1],]
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
data_vms_trip
dim(data_vms_tra)
data_vms_tra$trip[1]
data_vms_trip    <- data_vms_tra[data_vms_tra$trip == data_vms_tra$trip[1],]
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
text(data_vms_trip$Lon, data_vms_trip$Lat, labels = data_vms_trip$Rumbo_Calc)
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
text(data_vms_trip$Lon, data_vms_trip$Lat, labels = round(data_vms_trip$Rumbo_Calc))
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
text(data_vms_trip$Lon, data_vms_trip$Lat,
labels = round(data_vms_trip$Rumbo_Calc), pos = 2, cex = 0.8)
length(data_vms_trip$Lon)
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
text(data_vms_trip$Lon, data_vms_trip$Lat,
labels = round(data_vms_trip$Rumbo_Calc), pos = sample(x = 1:4,size = 10), cex = 0.8)
#
sample(x = 1:4,size = 10)
sample(x = c(1:4),size = 10)
sample(x = 1,size = 10)
sample(x = 10)
sample(x = 4)
sample(x = 4, size = 10)
sample(x = 1,size = 1)
sample(x = 1,size = 2)
sample(x = 1:2,size = 2)
sample(x = 142,size = 2)
sample(x = 1:4,size = 2)
sample(x = 1:4,size = 3)
sample(x = 1:4,size = 4)
sample(x = 1:4,size = 5)
runif(n = 10,min = 1,max = 4)
round(runif(n = 10,min = 1,max = 4))
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal)
text(data_vms_trip$Lon, data_vms_trip$Lat,
labels = round(data_vms_trip$Rumbo_Calc), pos = round(runif(n = 10,min = 1,max = 4)), cex = 0.8)
data_vms_trip
data_vms_trip
round(data_vms_trip$Rumbo_Calc)
# DEMO --------------------------------------------------------------------
require(vmsR)
data_vms_proc <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
data_vms_tray <- identify_trip(data = data_vms_pro, vharbor = 2, rmin = 6, hmax = 2.7)
data_vms_proc
data_vms_proc <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
warnings()
head(data_vms_proc)
data_vms_tray <- identify_trip(data = data_vms_pro, vharbor = 2, rmin = 6, hmax = 2.7)
data_vms_tray <- identify_trip(data = data_vms_proc, vharbor = 2, rmin = 6, hmax = 2.7)
head(data_vms_tray)
ls(package::vmsR)
ls(package:::vmsR)
ls(packages:::vmsR)
ls()
ls("package:vmsR")
ls("package::vmsR")
ls("package:::vmsR")
ls("packages:::vmsR")
ls("packague:::vmsR")
ls(pattern = "O")
# DEMO --------------------------------------------------------------------
require(vmsR)
data(data_vms_raw)
data_vms_proc <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
data_vms_tray <- identify_trip(data = data_vms_pro, vharbor = 2, rmin = 6, hmax = 2.7)
data_vms_trip    <- data_vms_tra[data_vms_tra$trip == data_vms_tra$trip[1],]
map_vms(data_vms_trip$Lon, data_vms_trip$Lat, data_vms_trip$Vel_Cal, )
text(data_vms_trip$Lon, data_vms_trip$Lat,
labels = round(data_vms_trip$Rumbo_Calc), pos = round(runif(n = 10,min = 1,max = 4)), cex = 0.8)
# DEMO --------------------------------------------------------------------
require(vmsR)
data_vms_proc <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
data_vms_tray <- identify_trip(data = data_vms_pro, vharbor = 2, rmin = 6, hmax = 2.7)
data_vms_trip    <- data_vms_tra[data_vms_tra$trip == data_vms_tra$trip[1],]
head(data_vms_proc)
head(data_vms_raw)
data_vms_tray
data_vms_tray <- identify_trip(data = data_vms_proc, vharbor = 2, rmin = 6, hmax = 2.7)
# DEMO --------------------------------------------------------------------
require(vmsR)
data(data_vms_raw)
data_vms_proc <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
data_vms_tray <- identify_trip(data = data_vms_proc, vharbor = 2, rmin = 6, hmax = 2.7)
data_vms_trip    <- data_vms_tra[data_vms_tra$trip == data_vms_tra$trip[1],]
# DEMO --------------------------------------------------------------------
require(vmsR)
head(data_vms_raw)
R.version
library(vmsR)
library(vmsR)
# DEMO --------------------------------------------------------------------
require(vmsR)
# data(data_vms_raw)
#
data_vms_proc <- processing_vms(data = data_vms_raw, vessel = "Cod_Barco", harbor = harbor)
data_vms_tray  <- identify_trajectories(data = data_vms_proc, vharbor = 2, rmin = 6*6, hmax = 2.7)
identify_trajectories <- function(data, vharbor = 2, rmin = 6, hmax = 2.7){
library(dplyr)
library(geoR)
id_viajes <- lapply(split(data, data$Cod_Barco, drop = TRUE), function(x){
y <- identify_trip(data = x, vharbor = vharbor, rmin = rmin, hmax = hmax)
as.data.frame(y)
})
id_viajes <- id_viajes %>% lapply(as.data.frame) %>% bind_rows()
id_viajes <- viaje_registro_compartido(id_viajes)
id_viajes <- eliminar_emisiones_erradas(id_viajes)
id_viajes$dist_costa <- estima_dc2(id_viajes$Lon, id_viajes$Lat)
return(id_viajes)
}
data_vms_tray  <- identify_trajectories(data = data_vms_proc, vharbor = 2, rmin = 6*6, hmax = 2.7)
identify_trajectories <- function(data, vharbor = 2, rmin = 6, hmax = 2.7){
library(dplyr)
#library(geoR)
library(rgeos)
id_viajes <- lapply(split(data, data$Cod_Barco, drop = TRUE), function(x){
y <- identify_trip(data = x, vharbor = vharbor, rmin = rmin, hmax = hmax)
as.data.frame(y)
})
id_viajes <- id_viajes %>% lapply(as.data.frame) %>% bind_rows()
id_viajes <- viaje_registro_compartido(id_viajes)
id_viajes <- eliminar_emisiones_erradas(id_viajes)
id_viajes$dist_costa <- estima_dc2(id_viajes$Lon, id_viajes$Lat)
return(id_viajes)
}
data_vms_tray  <- identify_trajectories(data = data_vms_proc, vharbor = 2, rmin = 6*6, hmax = 2.7)
data = data_vms_proc
library(dplyr)
#library(geoR)
library(rgeos)
id_viajes <- lapply(split(data, data$Cod_Barco, drop = TRUE), function(x){
y <- identify_trip(data = x, vharbor = vharbor, rmin = rmin, hmax = hmax)
as.data.frame(y)
})
vharbor = 2
rmin = 6
hmax = 2.7
library(dplyr)
#library(geoR)
library(rgeos)
id_viajes <- lapply(split(data, data$Cod_Barco, drop = TRUE), function(x){
y <- identify_trip(data = x, vharbor = vharbor, rmin = rmin, hmax = hmax)
as.data.frame(y)
})
head(id_viajes)
id_viajes <- viaje_registro_compartido(id_viajes)
head(id_viajes)
id_viajes <- eliminar_emisiones_erradas(id_viajes)
head(id_viajes)
id_viajes <- viaje_registro_compartido(id_viajes)
data <- id_viajes
limpiar_filas <- lapply(split(data, data$trip, drop = TRUE), function(x){
obs_time <- x$Time[is.na(x$Time)]
error_fila     <- rep(0, length(x$Lat))
error_fila[-1] <- abs(diff(round(x$Lat,1)))
# error en latitud
ubicar_error_lat <- which(error_fila > 0.5)
if(length(ubicar_error_lat) != 0){
x    <- x[-ubicar_error_lat,]
}
# error en time
ubicar_error_time <- which(round(x$Time,2) < 0.05)
if(length(ubicar_error_time) != 0){
x    <- x[-ubicar_error_time,]
}
if(x$Time[1] > 2.7){
x$Time[1] = 1
}
as.data.frame(x)
})
##******************************************************
x <- data[data$trip %in% data$trip[1], ]
data$trip[1]
head(data)
data$trip
str(data)
data = data_vms_proc
library(dplyr)
#library(geoR)
library(rgeos)
id_viajes <- lapply(split(data, data$Cod_Barco, drop = TRUE), function(x){
y <- identify_trip(data = x, vharbor = vharbor, rmin = rmin, hmax = hmax)
as.data.frame(y)
})
id_viajes <- id_viajes %>% lapply(as.data.frame) %>% bind_rows()
head(id_viajes)
id_viajes <- viaje_registro_compartido(data = id_viajes)
head(id_viajes)
id_viajes2 <- eliminar_emisiones_erradas(data = id_viajes)
id_viajes <- eliminar_emisiones_erradas(data = id_viajes)
id_viajes$dist_costa <- estima_dc2(id_viajes$Lon, id_viajes$Lat)
id_viajes$Lat
id_viajes$Lon
estima_dc2(lon = id_viajes$Lon, lat = id_viajes$Lat)
library(sp)
id_viajes$dist_costa <- estima_dc2(lon = id_viajes$Lon, lat = id_viajes$Lat)
